{"version":3,"sources":["../../src/parsers/jpz.js"],"names":["isString","require","isObject","Promise","fs","readFile","promisify","Puzzle","JPZParser","puzzle","then","fileContent","toString","catch","ex","Error","message","resolve","reject","exports","module"],"mappings":";;;;;;AAAA;;;;;;;AAOA,IAAMA,WAAWC,QAAQ,iBAAR,CAAjB;AACA,IAAMC,WAAWD,QAAQ,iBAAR,CAAjB;AACA,IAAME,UAAWF,QAAQ,UAAR,CAAjB;AACA,IAAMG,KAAWH,QAAQ,IAAR,CAAjB;AACA;AACA,IAAMI,WAAWD,GAAGC,QAAH,GAAcF,QAAQG,SAAR,CAAkBF,GAAGC,QAArB,CAAd,GAA+C,YAAM,CAAE,CAAxE;AACA,IAAME,SAAWN,QAAQ,eAAR,CAAjB;;AAEA;;;;IAGMO,S;;;;;;;;AACL;;;;;;;;;wBASMC,M,EAAQ;AACb,OAAIT,SAASS,MAAT,CAAJ,EAAsB;AACrB;AACA,WAAOJ,SAASI,MAAT,EAAiBC,IAAjB,CACN,UAACC,WAAD;AAAA,YAAiB,IAAIJ,MAAJ,CAAWI,YAAYC,QAAZ,EAAX,CAAjB;AAAA,KADM,EAELC,KAFK,CAGN,UAACC,EAAD,EAAQ;AACP,WAAM,IAAIC,KAAJ,CAAU,yCACfN,MADe,GACN,IADM,GACCK,GAAGE,OADd,CAAN;AAEA,KANK,CAAP;AAQA,IAVD,MAWK,IAAId,SAASO,MAAT,CAAJ,EAAsB;AAC1B,WAAON,QAAQc,OAAR,CAAgB,IAAIV,MAAJ,CAAWE,MAAX,CAAhB,CAAP;AACA,IAFI,MAGA;AACJ,WAAON,QAAQe,MAAR,CAAe,IAAIH,KAAJ,CAAU,mDAAV,CAAf,CAAP;AACA;AACD;;;;;;AAGFI,UAAUC,OAAOD,OAAP,GAAiBX,SAA3B","file":"jpz.js","sourcesContent":["/**\n * JPZ Parser\n *\n * @description Parses .jpz formatted puzzles (NOT CURRENTLY IMPLEMENTED)\n * @module xpuz/parsers/jpz\n */\n\nconst isString = require(\"lodash/isString\");\nconst isObject = require(\"lodash/isObject\");\nconst Promise  = require(\"bluebird\");\nconst fs       = require(\"fs\");\n// fs is stubbed out for browser builds\nconst readFile = fs.readFile ? Promise.promisify(fs.readFile) : () => {};\nconst Puzzle   = require(\"../lib/puzzle\");\n\n/**\n * JPZ parser class\n */\nclass JPZParser {\n\t/**\n\t * Parses a {@link module:xpuz/puzzle~Puzzle} from the input\n\t *\n\t * @param {string|object} puzzle - the source to parse the puzzle from; if a string,\n\t *\tit is assumed to be a file path, if an object, it defines a Puzzle object\n\t *\n\t * @return {external:Promise<module:xpuz/puzzle~Puzzle>} a promise that resolves with\n\t *\tthe parsed puzzle object\n\t */\n\tparse(puzzle) {\n\t\tif (isString(puzzle)) {\n\t\t\t// path to puzzle\n\t\t\treturn readFile(puzzle).then(\n\t\t\t\t(fileContent) => new Puzzle(fileContent.toString())\n\t\t\t).catch(\n\t\t\t\t(ex) => {\n\t\t\t\t\tthrow new Error(\"Unable to read JPZ puzzle from file \" +\n\t\t\t\t\t\tpuzzle + \": \" + ex.message);\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t\telse if (isObject(puzzle)) {\n\t\t\treturn Promise.resolve(new Puzzle(puzzle));\n\t\t}\n\t\telse {\n\t\t\treturn Promise.reject(new Error(\"parse() expects either a path string or an object\"));\n\t\t}\n\t}\n}\n\nexports = module.exports = JPZParser;\n"]}