{
  "version": 3,
  "sources": [
    "../../node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "index.js",
    "immutable-puzzle.js",
    "puzzle-mixin.js",
    "puzzle.js",
    "ipuz.js",
    "jpz.js",
    "puz.js",
    "puz-reader.js"
  ],
  "names": [],
  "mappings": "AAAA;;;ACAA;;;;;;;;AAQA,IAAM,SAAS,QAAQ,cAAR,CAAf;AACA,IAAM,kBAAkB,QAAQ,wBAAR,CAAxB;;AAEA,UAAU,OAAO,OAAP,GAAiB;AAC1B;;;;;;;;AAQA,UAAS;AACR,QAAM,QAAQ,gBAAR,CADE;AAER,OAAK,QAAQ,eAAR,CAFG;AAGR,OAAK,QAAQ,eAAR;AAHG,EATiB;;AAe1B;;;;;;AAMA,eArB0B;;AAuB1B;;;;;;AAMA,iCA7B0B;;AA+B1B,+BA/B0B,0CA+BK,MA/BL,EA+Ba;AACtC,SAAO,IAAI,eAAJ,CAAoB;AAC1B,SAAM,OAAO,IADa;AAE1B,UAAO,OAAO,KAFY;AAG1B,iBAAc,OAAO,YAHK;AAI1B,SAAM,OAAO,IAJa;AAK1B,eAAY,OAAO;AALO,GAApB,CAAP;AAOA,EAvCyB;AAyC1B,+BAzC0B,0CAyCK,eAzCL,EAyCsB;AAC/C,SAAO,IAAI,MAAJ,CAAW;AACjB,SAAM,gBAAgB,IAAhB,CAAqB,IAArB,EADW;AAEjB,UAAO,gBAAgB,KAAhB,CAAsB,IAAtB,EAFU;AAGjB,iBAAc,gBAAgB,YAAhB,CAA6B,IAA7B,EAHG;AAIjB,SAAM,gBAAgB,IAAhB,CAAqB,IAArB,EAJW;AAKjB,eAAY,gBAAgB,UAAhB,CAA2B,IAA3B;AALK,GAAX,CAAP;AAOA;AAjDyB,CAA3B;;;;;;;;;;;eCJoB,QAAQ,WAAR,C;IANnB,I,YAAA,I;IACA,G,YAAA,G;IACA,M,YAAA,M;IACA,E,YAAA,E;IACA,U,YAAA,U;IACA,M,YAAA,M;;AAED,IAAM,cAAc,QAAQ,gBAAR,CAApB;;AAEA,IAAM,aAAa;AAClB,QAAO,EADW;AAElB,SAAQ,EAFU;AAGlB,YAAW,EAHO;AAIlB,YAAW,EAJO;AAKlB,aAAY,EALM;AAMlB,QAAO;AANW,CAAnB;;IASM,U;;;;;;;;;;EAAmB,OAAO,UAAP,EAAmB,YAAnB,C;;AAEzB,IAAM,SAAS;AACd,OAAM,MADQ;AAEd,QAAO,IAAI;AACV,UAAQ,KADE;AAEV,QAAM;AAFI,EAAJ,CAFO;AAMd,eAAc,MANA;AAOd,OAAM,IAAI,UAAJ,EAPQ;AAQd,aAAY;AARE,CAAf;;AAWA;;;;;;;;;IAQM,e;;;AACL;;;;;;;;;;;AAWA,gCAMG;AAAA,MALF,IAKE,QALF,IAKE;AAAA,MAJF,KAIE,QAJF,KAIE;AAAA,MAHF,YAGE,QAHF,YAGE;AAAA,MAFF,IAEE,QAFF,IAEE;AAAA,MADF,UACE,QADF,UACE;;AAAA;;AACF,MAAI,EAAE,gBAAgB,UAAlB,CAAJ,EAAmC;AAClC,UAAO,IAAI,UAAJ,CAAe,IAAf,CAAP;AACA;;AAED,SAAO,OAAO,gBAAgB,WAAhB,CAA4B,OAAO,IAAP,CAA5B,CAAP,GAAmD,MAA1D;;AAEA,MAAM,OAAO;AACZ,aADY;AAEZ,aAFY;AAGZ,iBAAc,eACb,OAAO,YAAP,CADa,GAEb,KAAK,GAAL,CACC,UAAC,GAAD;AAAA,WAAS,IAAI,GAAJ,CACR,UAAC,IAAD;AAAA,YAAU,KAAK,GAAL,CAAS,aAAT,IAA0B,IAA1B,GAAiC,EAA3C;AAAA,KADQ,CAAT;AAAA,IADD;AALW,GAAb;;AAYA,MAAI,KAAJ,EAAW;AACV,QAAK,KAAL,GAAa,OAAO,KAAP,CAAb;AACA;;AAED,MAAI,UAAJ,EAAgB;AACf,QAAK,UAAL,GAAkB,OAAO,UAAP,CAAlB;AACA;;AAzBC,2HA2BI,IA3BJ;AA4BF;;AAED;;;;;;;;;EAhD6B,OAAO,MAAP,EAAe,iBAAf,C;;AAwD9B,YAAY;AACX,cAAa,eADF;AAEX,eAAc,EAFH;AAGX,SAAQ,gBAAC,GAAD,EAAM,IAAN;AAAA,SAAe,IAAI,KAAJ,CAAU,IAAV,CAAf;AAAA,EAHG;AAIX,SAAQ,gBAAC,GAAD,EAAM,IAAN,EAAY,KAAZ;AAAA,SAAsB,IAAI,KAAJ,CAAU,IAAV,EAAgB,iBAAiB,UAAjB,GAA8B,KAA9B,GAAsC,OAAO,KAAP,CAAtD,CAAtB;AAAA,EAJG;AAKX,SAAQ,gBAAC,GAAD;AAAA,SAAS,IAAI,IAAb;AAAA;AALG,CAAZ;;AAQA,IAAM,iBAAiB,gBAAgB,WAAvC;;AAEA,gBAAgB,WAAhB,GAA8B,SAAS,WAAT,CAAqB,IAArB,EAA2B;AACxD,QAAO,KAAK,aAAL,CACN,UAAC,iBAAD;AAAA,SAAuB,eAAe,iBAAf,CAAvB;AAAA,EADM,CAAP;AAGA,CAJD;;AAMA,UAAU,OAAO,OAAP,GAAiB,eAA3B;;;;;;;AChHA,IAAM,SAAS,QAAQ,SAAR,CAAf;AACA,IAAM,MAAS,QAAQ,YAAR,CAAf;AACA,IAAM,MAAS,QAAQ,YAAR,CAAf;AACA,IAAM,OAAS,QAAQ,aAAR,CAAf;;AAEA;;;;;;;;AAQA,SAAS,WAAT,OAA+F;AAAA;;AAAA,KAAxE,WAAwE,QAAxE,WAAwE;AAAA,KAA3D,YAA2D,QAA3D,YAA2D;AAAA,wBAA7C,MAA6C;AAAA,KAA7C,MAA6C,+BAApC,GAAoC;AAAA,wBAA/B,MAA+B;AAAA,KAA/B,MAA+B,+BAAtB,GAAsB;AAAA,wBAAjB,MAAiB;AAAA,KAAjB,MAAiB,+BAAR,IAAQ;;AAC9F,KAAM,kBAAkB,YAAY,IAApC;;AAEA;;;;;;;;;;;;;;;;;AAiBA,UAAS,mBAAT,QAA6E;AAAA,MAA9C,IAA8C,SAA9C,IAA8C;AAAA,MAAxC,KAAwC,SAAxC,KAAwC;AAAA,MAAjC,MAAiC,SAAjC,MAAiC;AAAA,MAAzB,QAAyB,SAAzB,QAAyB;AAAA,MAAf,WAAe,SAAf,WAAe;;AAC5E,MAAM,kBAAkB,EAAxB;;AAEA,MAAM,aAAa,OAAO,IAAP,EAAa,CAAC,QAAD,EAAW,WAAX,EAAwB,YAAxB,CAAb,CAAnB;;AAEA,MAAI,eAAe,SAAnB,EAA8B;AAC7B;AACA;AACA;;AAEA;AACC;AACA;AACA;AACA,IAAC,gBAAgB,CAAhB,IAAqB,OAAO,IAAP,EAAa,CAAC,QAAD,EAAW,cAAc,CAAzB,EAA4B,aAA5B,CAAb,CAAtB;AACA;AACC,iBAAc,QAAQ,CAAtB,IAA2B,CAAC,OAAO,IAAP,EAAa,CAAC,QAAD,EAAW,cAAc,CAAzB,EAA4B,aAA5B,CAAb,CAN9B,EAOE;AACD,oBAAgB,MAAhB,GAAyB,UAAzB;AACA,IATD,MAUK;AACJ;AACA,cAAW,SAAS,CAApB,IAAyB,CAAC,OAAO,IAAP,EAAa,CAAC,WAAW,CAAZ,EAAe,WAAf,EAA4B,aAA5B,CAAb,CAFtB,EAGJ;AACA;AACA;AACA,oBAAgB,IAAhB,GAAuB,UAAvB;AACA;AACD;;AAED,MAAI,CAAC,gBAAgB,MAArB,EAA6B;AAC5B;AACA;AACA;AACA;AACC;AACC,mBAAgB,CAAhB,IAAqB,eAAe,SAArC;AACA;AACA,IAAC,OAAO,IAAP,EAAa,CAAC,QAAD,EAAW,cAAc,CAAzB,EAA4B,aAA5B,CAAb,CAJF,EAKE;AACD,oBAAgB,MAAhB,GAAyB,UAAzB;AACA,IAPD,MAQK;AACJ,SAAK,IAAI,IAAI,WAAb,EAA0B,KAAK,CAA/B,EAAkC,GAAlC,EAAuC;AACtC,SAAI,OAAO,IAAP,EAAa,CAAC,QAAD,EAAW,CAAX,EAAc,aAAd,CAAb,CAAJ,EAAgD;AAC/C;AACA;;AAED;AACC;AACA,SAAI,QAAQ,CAAZ,IAAiB,CAAC,OAAO,IAAP,EAAa,CAAC,QAAD,EAAW,IAAI,CAAf,EAAkB,aAAlB,CAAb,CAFnB,EAGE;AACD,sBAAgB,MAAhB,GAAyB,OAAO,IAAP,EAAa,CAAC,QAAD,EAAW,CAAX,EAAc,YAAd,CAAb,CAAzB;AACA;AACD;AACD;AACD;;AAED,MAAI,CAAC,gBAAgB,IAArB,EAA2B;AAC1B;AACA;AACA;AACC;AACC,gBAAa,CAAb,IAAkB,eAAe,SAAlC;AACA;AACA,IAAC,OAAO,IAAP,EAAa,CAAC,WAAW,CAAZ,EAAe,WAAf,EAA4B,aAA5B,CAAb,CAJF,EAKE;AACD,oBAAgB,IAAhB,GAAuB,UAAvB;AACA,IAPD,MAQK;AACJ,SAAK,IAAI,KAAI,QAAb,EAAuB,MAAK,CAA5B,EAA+B,IAA/B,EAAoC;AACnC,SAAI,OAAO,IAAP,EAAa,CAAC,EAAD,EAAI,WAAJ,EAAiB,aAAjB,CAAb,CAAJ,EAAmD;AAClD;AACA;;AAED;AACC;AACA,UAAI,SAAS,CAAb,IAAkB,CAAC,OAAO,IAAP,EAAa,CAAC,KAAI,CAAL,EAAQ,WAAR,EAAqB,aAArB,CAAb,CAFpB,EAGE;AACD,sBAAgB,IAAhB,GAAuB,OAAO,IAAP,EAAa,CAAC,EAAD,EAAI,WAAJ,EAAiB,YAAjB,CAAb,CAAvB;AACA;AACD;AACD;AACD;;AAED,SAAO,eAAP;AACA;;AAED;;;;;;;;;;;;;;;;;AAiBA,UAAS,aAAT,QAAuE;AAAA,MAA9C,IAA8C,SAA9C,IAA8C;AAAA,MAAxC,KAAwC,SAAxC,KAAwC;AAAA,MAAjC,MAAiC,SAAjC,MAAiC;AAAA,MAAzB,QAAyB,SAAzB,QAAyB;AAAA,MAAf,WAAe,SAAf,WAAe;;AACtE,MAAI,OAAO,IAAP,EAAa,CAAC,QAAD,EAAW,WAAX,EAAwB,aAAxB,CAAb,CAAJ,EAA0D;AACzD,UAAO,SAAP;AACA;;AAED,MACC,CAAC,gBAAgB,CAAhB,IAAqB,OAAO,IAAP,EAAa,CAAC,QAAD,EAAW,cAAc,CAAzB,EAA4B,aAA5B,CAAb,CAAtB,KACC,cAAc,CAAd,GAAkB,KAAlB,IAA2B,CAAC,OAAO,IAAP,EAAa,CAAC,QAAD,EAAW,cAAc,CAAzB,EAA4B,aAA5B,CAAb,CAF9B,EAGE;AACD;AACA;AACA,UAAO,IAAP;AACA;;AAED,MACC,CAAC,aAAa,CAAb,IAAkB,OAAO,IAAP,EAAa,CAAC,WAAW,CAAZ,EAAe,WAAf,EAA4B,aAA5B,CAAb,CAAnB,KACC,WAAW,CAAX,GAAe,MAAf,IAAyB,CAAC,OAAO,IAAP,EAAa,CAAC,WAAW,CAAZ,EAAe,WAAf,EAA4B,aAA5B,CAAb,CAF5B,EAGE;AACD;AACA;AACA,UAAO,IAAP;AACA;;AAED,SAAO,KAAP;AACA;;AAED,QAAO,gBAAP,CACC,YAAY,SADb;AAGE;;;;;;;;;;;AAWA,UAAQ;AACP,aAAU,IADH;AAEP,iBAAc,IAFP;AAGP,UAAO,SAAS,MAAT,CAAgB,KAAhB,EAAuB;AAC7B,QAAI,EAAE,iBAAiB,WAAnB,CAAJ,EAAqC;AACpC,YAAO,KAAP;AACA;;AAED,WAAO,aAAa,KAAK,IAAlB,EAAwB,MAAM,IAA9B,KACN,aAAa,KAAK,KAAlB,EAAyB,MAAM,KAA/B,CADM,IAEN,aAAa,KAAK,YAAlB,EAAgC,MAAM,YAAtC,CAFM,IAGN,aAAa,KAAK,IAAlB,EAAwB,MAAM,IAA9B,CAHM,IAIN,aAAa,KAAK,UAAlB,EAA8B,MAAM,UAApC,CAJD;AAKA;AAbM,GAdV;;AA8BE;;;;;;;;;AASA,YAAU;AACT,aAAU,IADD;AAET,iBAAc,IAFL;AAGT,UAAO,SAAS,QAAT,GAAoB;AAC1B,WAAO,OAAO,IAAP,CAAP;AACA;AALQ,GAvCZ;;AA+CE;;;;;;;;;AASA,YAAU;AACT,aAAU,IADD;AAET,iBAAc,IAFL;AAGT,UAAO,SAAS,QAAT,GAAoB;AAC1B,WAAO,eAAP;AACA;AALQ;;AAxDZ,2CA0EG,OAAO,WA1EV,EA0EwB;AACrB,gBAAc,IADO;AAErB,KAFqB,iBAEf;AACL,UAAO,eAAP;AACA;AAJoB,EA1ExB,wDA6Fc;AACX,YAAU,IADC;AAEX,gBAAc,IAFH;AAGX,SAAO,SAAS,UAAT,GAAsC;AAAA,OAAlB,IAAkB,uEAAX,KAAK,IAAM;;AAC5C,UAAO,OAAO,IAAP,EAAa,CAAC,MAAD,CAAb,EAAuB,YAAY,WAAZ,CAAwB,IAAxB,CAAvB,CAAP;AACA;AALU,EA7Fd,wDAoHc;AACX,YAAU,IADC;AAEX,gBAAc,IAFH;AAGX,SAAO,SAAS,UAAT,CAAoB,WAApB,EAAiC,QAAjC,EAA2C,IAA3C,EAAiD;AACvD,OAAM,OAAO,OAAO,KAAK,IAAZ,EAAkB,CAAC,QAAD,EAAW,WAAX,CAAlB,EAA2C,IAA3C,CAAb;;AAEA,UAAO,KAAK,UAAL,CAAgB,IAAhB,CAAP;AACA;AAPU,EApHd;;AAgIA,QAAO,gBAAP,CACC,WADD,EAEC;AACC;;;;;;;;;;;;AAYA,eAAa;AACZ,aAAU,IADE;AAEZ,eAAY,IAFA;AAGZ,UAAO,SAAS,WAAT,CAAqB,IAArB,EAA2B;AACjC,QAAM,SAAS,OAAO,IAAP,CAAf;AACA,QAAM,QAAQ,OAAO,OAAO,IAAP,EAAa,CAAC,CAAD,CAAb,CAAP,CAAd;AACA,QAAI,aAAa,CAAjB;;AAEA,SAAK,IAAI,WAAW,CAApB,EAAuB,WAAW,MAAlC,EAA0C,UAA1C,EAAsD;AACrD,UAAK,IAAI,cAAc,CAAvB,EAA0B,cAAc,KAAxC,EAA+C,aAA/C,EAA8D;AAC7D,UAAI,OAAO,IAAP,EAAa,CAAC,QAAD,EAAW,WAAX,EAAwB,aAAxB,CAAb,CAAJ,EAA0D;AACzD;AACA;;AAED,UAAM,OAAO;AACZ,iBADY;AAEZ,mBAFY;AAGZ,qBAHY;AAIZ,yBAJY;AAKZ;AALY,OAAb;;AAQA,UAAM,iBAAiB,cAAc,IAAd,IACtB,EAAE,UADoB,GAEtB,SAFD;;AAIA,aAAO,IAAP,EAAa,CAAC,QAAD,EAAW,WAAX,EAAwB,YAAxB,CAAb,EAAoD,cAApD;;AAEA,aAAO,IAAP,EAAa,CAAC,QAAD,EAAW,WAAX,EAAwB,iBAAxB,CAAb,EAAyD,oBAAoB,IAApB,CAAzD;AAEA;AACD;;AAED,WAAO,IAAP;AACA;AAlCW;AAbd,EAFD;AAqDA;;AAED,UAAU,OAAO,OAAP,GAAiB,WAA3B;;;;;;;AC3VA,IAAM,SAAkB,QAAQ,eAAR,CAAxB;AACA,IAAM,UAAkB,QAAQ,gBAAR,CAAxB;AACA,IAAM,cAAkB,QAAQ,gBAAR,CAAxB;;AAEA;;;;;;;;;;;;;;;AAeA;;;;;;;IAMM,M;AACL;;;;;;;;;;;;;AAaA,sBAMG;AAAA;;AAAA,KALF,IAKE,QALF,IAKE;AAAA,KAJF,KAIE,QAJF,KAIE;AAAA,KAHF,YAGE,QAHF,YAGE;AAAA,KAFF,IAEE,QAFF,IAEE;AAAA,KADF,UACE,QADF,UACE;;AAAA;;AAAA,MAiFH,MAjFG,GAiFM,YAAM;AACd,SAAO;AACN,SAAM,MAAK,IADL;AAEN,UAAO,MAAK,KAFN;AAGN,iBAAc,MAAK,YAHb;AAIN,SAAM,MAAK,IAJL;AAKN,eAAY,MAAK;AALX,GAAP;AAOA,EAzFE;;AAAA,MAkGH,KAlGG,GAkGK,YAAM;AACb,SAAO,IAAI,MAAJ,CACN;AACC,SAAM,MAAK,IAAL,CAAU,GAAV,CACL,UAAC,GAAD;AAAA,WAAS,IAAI,GAAJ,CACR,UAAC,IAAD;AAAA,YAAU,OAAO,MAAP,CAAc,EAAd,EAAkB,IAAlB,CAAV;AAAA,KADQ,CAC0B;AAD1B,KAAT;AAAA,IADK,CADP;AAMC,UAAO;AACN,YAAQ,OACP,MAAK,KAAL,CAAW,MADJ,EAEP,UAAC,MAAD,EAAS,IAAT,EAAe,UAAf,EAA8B;AAC7B,YAAO,UAAP,IAAqB,IAArB;;AAEA,YAAO,MAAP;AACA,KANM,EAOP,EAPO,CADF;AAUN,UAAM,OACL,MAAK,KAAL,CAAW,IADN,EAEL,UAAC,MAAD,EAAS,IAAT,EAAe,UAAf,EAA8B;AAC7B,YAAO,UAAP,IAAqB,IAArB;;AAEA,YAAO,MAAP;AACA,KANI,EAOL,EAPK;AAVA,IANR;AA0BC,iBAAc,MAAK,YAAL,CAAkB,GAAlB,CACb,UAAC,GAAD;AAAA,WAAS,IAAI,GAAJ,CACR,UAAC,IAAD;AAAA,YAAU,IAAV;AAAA,KADQ,CACO;AADP,KAAT;AAAA,IADa,CA1Bf;AA+BC,SAAM,OAAO,MAAP,CAAc,EAAd,EAAkB,MAAK,IAAvB,CA/BP;AAgCC,eAAY,KAAK,KAAL,CAAW,KAAK,SAAL,CAAe,MAAK,UAApB,CAAX,CAhCb,CAgC0D;AAhC1D,GADM,CAAP;AAoCA,EAvIE;;AACF;;;;;;;AAOA,MAAK,IAAL,GAAY,OAAO,WAAP,CAAmB,QAAQ,EAA3B,CAAZ,CARE,CAQ0C;;AAE5C;;;;;;;;;AASA,MAAK,KAAL,GAAa,SAAS;AACrB,UAAQ,EADa;AAErB,QAAM;AAFe,EAAtB;;AAKA,QAAO,QAAQ,EAAf;;AAEA;;;;;;;;;;;;;AAaA,MAAK,IAAL,GAAY;AACX,SAAO,KAAK,KAAL,IAAc,EADV;AAEX,UAAQ,KAAK,MAAL,IAAe,EAFZ;AAGX,aAAW,KAAK,SAAL,IAAkB,EAHlB;AAIX,aAAW,KAAK,SAAL,IAAkB,EAJlB;AAKX,cAAY,KAAK,UAAL,IAAmB,EALpB;AAMX,SAAO,KAAK,KAAL,IAAc;AANV,EAAZ;;AASA;;;;;;;;;;AAUA,MAAK,YAAL,GAAoB,gBAAgB,KAAK,GAAL,CACnC,UAAC,GAAD;AAAA,SAAS,IAAI,GAAJ,CACR,UAAC,IAAD;AAAA,UAAU,KAAK,WAAL,GAAmB,IAAnB,GAA0B,EAApC;AAAA,GADQ,CAAT;AAAA,EADmC,CAApC;;AAMA;;;;;;;AAOA,MAAK,UAAL,GAAkB,cAAc,EAAhC;AACA;;AAED;;;;;;;;;AAiBA;;;;;;;;;AA+CD,YAAY;AACX,cAAa,MADF;AAEX,eAAc;AAFH,CAAZ;;AAKA,UAAU,OAAO,OAAP,GAAiB,MAA3B;;;;;;;;;;;AC5LA;;;;;;AAMA,IAAM,UAAW,QAAQ,UAAR,CAAjB;AACA,IAAM,KAAW,QAAQ,IAAR,CAAjB;AACA;AACA,IAAM,WAAW,GAAG,QAAH,GAAc,QAAQ,SAAR,CAAkB,GAAG,QAArB,CAAd,GAA+C,YAAM,CAAE,CAAxE;AACA,IAAM,MAAW,QAAQ,YAAR,CAAjB;AACA,IAAM,MAAW,QAAQ,YAAR,CAAjB;AACA,IAAM,WAAW,QAAQ,iBAAR,CAAjB;AACA,IAAM,WAAW,QAAQ,iBAAR,CAAjB;AACA,IAAM,SAAW,QAAQ,eAAR,CAAjB;AACA,IAAM,SAAW,QAAQ,eAAR,CAAjB;;AAEA,IAAM,cAAc,GAApB;;AAEA,SAAS,gBAAT,CAA0B,MAA1B,EAAkC;AACjC,KAAM,SAAS,EAAf;;AAEA,KAAM,eAAe,IACpB,OAAO,MADa,EAEpB,QAFoB,EAGnB,MAHF;;AAKA,KAAM,UAAU,OAAO,MAAP,CAAc,MAA9B;;AAEA,KAAI,eAAe,OAAO,UAAP,CAAkB,KAArC,EAA4C;AAC3C,SAAO,IAAP,6BAAsC,YAAtC,4BAAyE,OAAO,UAAP,CAAkB,KAA3F;AACA;;AAED,KAAI,UAAU,OAAO,UAAP,CAAkB,MAAhC,EAAwC;AACvC,SAAO,IAAP,6BAAsC,OAAtC,6BAAqE,OAAO,UAAP,CAAkB,MAAvF;AACA;;AAED,QAAO,MAAP;AACA;;AAED,SAAS,cAAT,CAAwB,IAAxB,EAA8B;AAC7B,QAAO,SAAS,IAAT,IACN,KAAK,IADC,GAEN,IAFD;AAGA;;AAED,SAAS,QAAT,CAAkB,GAAlB,EAAuB,IAAvB,EAA6B;AAC5B,KAAI,KAAK,CAAL,CAAJ,IAAe,KAAK,CAAL,CAAf;;AAEA,QAAO,GAAP;AACA;;AAED,SAAS,cAAT,CAAwB,IAAxB,EAA8B;AAC7B,KAAM,SAAS,IAAI,MAAJ,CAAW;AACzB,QAAM;AACL,UAAO,KAAK,KADP;AAEL,WAAQ,KAAK,MAFR;AAGL,cAAW,KAAK,SAHX;AAIL,cAAW,KAAK,SAJX;AAKL,eAAY,KAAK,UALZ;AAML,UAAO,KAAK;AANP,GADmB;AASzB,QAAM,KAAK,MAAL,CAAY,GAAZ,CACL,UAAC,GAAD;AAAA,UAAS,IAAI,GAAJ,CACR,UAAC,IAAD,EAAU;AACT,QAAI,SAAS,WAAb,EAA0B;AACzB,YAAO;AACN,mBAAa;AADP,MAAP;AAGA;;AAED,WAAO;AACN,iBAAY,eAAe,IAAf,CADN;AAEN,sBAAiB,IAAI,IAAJ,EAAU,eAAV;AAFX,KAAP;AAIA,IAZO,CAAT;AAAA,GADK,CATmB;AAyBzB,SAAO;AACN,WAAQ,OAAO,KAAK,KAAL,CAAW,MAAlB,EACP,QADO,EAEP,EAFO,CADF;AAKN,SAAM,OAAO,KAAK,KAAL,CAAW,IAAlB,EACL,QADK,EAEL,EAFK;AALA;AAzBkB,EAAX,CAAf;;AAqCA,QAAO,MAAP;AACA;;AAED,SAAS,eAAT,CAAyB,MAAzB,EAAiC;AAChC,KAAM,SAAS,EAAf;;AAEA,KAAI,CAAC,OAAO,UAAZ,EAAwB;AACvB,SAAO,IAAP,CAAY,oCAAZ;AACA;;AAED,KAAI,OAAO,MAAX,EAAmB;AAClB,SAAO,IAAP,kCAAe,iBAAiB,MAAjB,CAAf;AACA,EAFD,MAGK;AACJ,SAAO,IAAP,CAAY,gCAAZ;AACA;;AAED,QAAO,OAAO,MAAP,KAAkB,CAAlB,GAAsB,SAAtB,GAAkC,MAAzC;AACA;;AAED;;;;IAGM,U;;;;;;;;AACL;;;;;;;;wBAQM,M,EAAQ;AACb,OAAI,gBAAJ;;AAEA,OAAI,SAAS,MAAT,CAAJ,EAAsB;AACrB;AACA,cAAU,SAAS,MAAT,EAAiB,IAAjB,CACT,UAAC,WAAD;AAAA,YAAiB,KAAK,KAAL,CAAW,YAAY,QAAZ,EAAX,CAAjB;AAAA,KADS,EAER,KAFQ,CAGT,UAAC,EAAD,EAAQ;AACP,WAAM,IAAI,KAAJ,2CAAkD,MAAlD,UAA6D,GAAG,OAAhE,CAAN;AACA,KALQ,CAAV;AAOA,IATD,MAUK,IAAI,SAAS,MAAT,CAAJ,EAAsB;AAC1B,cAAU,QAAQ,OAAR,CAAgB,MAAhB,CAAV;AACA,IAFI,MAGA;AACJ,WAAO,QAAQ,MAAR,CAAe,IAAI,KAAJ,CAAU,mDAAV,CAAf,CAAP;AACA;;AAED,UAAO,QAAQ,IAAR,CACN,UAAC,MAAD,EAAY;AACX,QAAM,SAAS,gBAAgB,MAAhB,CAAf;;AAEA,QAAI,WAAW,SAAf,EAA0B;AACzB,WAAM,IAAI,KAAJ,yBAAgC,OAAO,IAAP,CAAY,MAAZ,CAAhC,CAAN;AACA;;AAED,WAAO,eAAe,MAAf,CAAP;AACA,IATK,CAAP;AAWA;;;;;;AAGF,UAAU,OAAO,OAAP,GAAiB,UAA3B;;;;;;;;;AC5JA;;;;;;;AAOA,IAAM,WAAW,QAAQ,iBAAR,CAAjB;AACA,IAAM,WAAW,QAAQ,iBAAR,CAAjB;AACA,IAAM,UAAW,QAAQ,UAAR,CAAjB;AACA,IAAM,KAAW,QAAQ,IAAR,CAAjB;AACA;AACA,IAAM,WAAW,GAAG,QAAH,GAAc,QAAQ,SAAR,CAAkB,GAAG,QAArB,CAAd,GAA+C,YAAM,CAAE,CAAxE;AACA,IAAM,SAAW,QAAQ,eAAR,CAAjB;;AAEA;;;;IAGM,S;;;;;;;;AACL;;;;;;;;;wBASM,M,EAAQ;AACb,OAAI,SAAS,MAAT,CAAJ,EAAsB;AACrB;AACA,WAAO,SAAS,MAAT,EAAiB,IAAjB,CACN,UAAC,WAAD;AAAA,YAAiB,IAAI,MAAJ,CAAW,YAAY,QAAZ,EAAX,CAAjB;AAAA,KADM,EAEL,KAFK,CAGN,UAAC,EAAD,EAAQ;AACP,WAAM,IAAI,KAAJ,CAAU,yCACf,MADe,GACN,IADM,GACC,GAAG,OADd,CAAN;AAEA,KANK,CAAP;AAQA,IAVD,MAWK,IAAI,SAAS,MAAT,CAAJ,EAAsB;AAC1B,WAAO,QAAQ,OAAR,CAAgB,IAAI,MAAJ,CAAW,MAAX,CAAhB,CAAP;AACA,IAFI,MAGA;AACJ,WAAO,QAAQ,MAAR,CAAe,IAAI,KAAJ,CAAU,mDAAV,CAAf,CAAP;AACA;AACD;;;;;;AAGF,UAAU,OAAO,OAAP,GAAiB,SAA3B;;;;;;;;;;;;ACjDA;;;;;;;AAOA,IAAM,MAAkB,QAAQ,YAAR,CAAxB;AACA,IAAM,MAAkB,QAAQ,YAAR,CAAxB;AACA,IAAM,QAAkB,QAAQ,cAAR,CAAxB;AACA,IAAM,UAAkB,QAAQ,gBAAR,CAAxB;AACA,IAAM,MAAkB,QAAQ,YAAR,CAAxB;AACA,IAAM,OAAkB,QAAQ,aAAR,CAAxB;AACA,IAAM,SAAkB,QAAQ,eAAR,CAAxB;AACA,IAAM,UAAkB,QAAQ,gBAAR,CAAxB;AACA,IAAM,WAAkB,QAAQ,iBAAR,CAAxB;AACA,IAAM,QAAkB,QAAQ,cAAR,CAAxB;AACA,IAAM,UAAkB,QAAQ,gBAAR,CAAxB;AACA,IAAM,UAAkB,QAAQ,gBAAR,CAAxB;AACA,IAAM,OAAkB,QAAQ,aAAR,CAAxB;AACA,IAAM,QAAkB,QAAQ,YAAR,CAAxB;AACA,IAAM,YAAkB,QAAQ,kBAAR,CAAxB;AACA,IAAM,SAAkB,QAAQ,eAAR,CAAxB;AACA,IAAM,kBAAkB,QAAQ,yBAAR,CAAxB;;AAGA,IAAM,mBAAmB,GAAzB;;AAEA,IAAM,yBAAyB,KAA/B;;AAEA,IAAM,0BAA0B,CAAhC;;AAEA,IAAM,8BAA8B,CAApC;;AAEA,IAAM,6BAA6B,CAAnC;;AAEA,IAAM,uBAAuB,CAA7B;;AAEA,IAAM,uBAAuB,EAA7B;;AAEA,IAAM,yBAAyB,CAA/B;;AAEA,IAAM,gCAAgC,CAAtC;;AAEA,IAAM,4BAA4B,CAAlC;;AAEA,IAAM,+BAA+B,CAArC;;AAEA,IAAM,uBAAuB,EAA7B;;AAEA,IAAM,iCAAiC,CAAvC;;AAEA,IAAM,wBAAwB,CAA9B;;AAEA,IAAM,oBAAoB,CAA1B;;AAEA,IAAM,yBAAyB,CAA/B;;AAEA,IAAM,cAAc;AACnB,SAAQ,MADW;AAEnB,cAAa;AAFM,CAApB;;AAKA,IAAM,iBAAiB;AACtB;AACA,WAAU,MAFY;AAGtB;AACA,SAAQ;AAJc,CAAvB;;AAOA,IAAM,cAAc;AACnB,sBAAqB,IADF;AAEnB,qBAAoB,IAFD;AAGnB,cAAa,IAHM;AAInB,UAAS;AAJU,CAApB;;AAOA,IAAM,OAAO,4BAAb;;AAEA,IAAM,oBAAoB,IAA1B;;AAEA,IAAM,oBAAoB,IAA1B;;AAEA,SAAS,WAAT,CAAqB,MAArB,EAA6B,KAA7B,EAAoC;AACnC,MAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,OAAO,MAA3B,EAAmC,GAAnC,EAAwC;AACvC;AACA,MAAM,SAAS,QAAQ,MAAvB;;AAEA,UAAQ,SAAS,CAAjB;;AAEA,MAAI,MAAJ,EAAY;AACX;AACA,WAAQ,QAAQ,MAAhB;AACA;;AAED;AACA;AACA,UAAS,QAAQ,OAAO,SAAP,CAAiB,CAAjB,CAAT,GAAgC,MAAxC;AACA;;AAED,QAAO,KAAP;AACA;;AAED,SAAS,WAAT,CAAqB,MAArB,EAA6B,OAA7B,EAAsC;AACrC,KAAM,OAAO,EAAb;;AAEA,MAAK,cAAL,GAAsB,OAAO,WAAP,EAAtB;;AAEA,QAAO,KAAP,CAAa,gBAAgB,MAA7B,EAAqC,EAAE,SAAS,IAAX,EAArC;;AAEA,MAAK,cAAL,GAAsB,OAAO,WAAP,EAAtB;;AAEA,MAAK,aAAL,GAAqB,OAAO,WAAP,CAAmB,0BAAnB,CAArB;;AAEA,MAAK,OAAL,GAAe,OAAO,WAAP,EAAf;;AAEA,MAAK,QAAL,GAAgB,OAAO,WAAP,CAAmB,oBAAnB,CAAhB;;AAEA,MAAK,iBAAL,GAAyB,OAAO,WAAP,EAAzB;;AAEA,MAAK,QAAL,GAAgB,OAAO,WAAP,CAAmB,oBAAnB,CAAhB;;AAEA,MAAK,KAAL,GAAa,OAAO,UAAP,EAAb;;AAEA,MAAK,MAAL,GAAc,OAAO,UAAP,EAAd;;AAEA,MAAK,aAAL,GAAqB,OAAO,WAAP,EAArB;;AAEA,MAAK,UAAL,GAAkB,OAAO,WAAP,EAAlB;;AAEA,MAAK,aAAL,GAAqB,OAAO,WAAP,EAArB;;AAEA,KAAI,KAAK,aAAL,KAAuB,eAAe,MAAtC,IAAgD,CAAC,QAAQ,WAA7D,EAA0E;AACzE,QAAM,IAAI,KAAJ,CAAU,kEAAV,CAAN;AACA;;AAED,QAAO,IAAP;AACA;;AAED,SAAS,iBAAT,CAA2B,SAA3B,EAAsC;AACrC,KAAI,UAAU,IAAV,KAAmB,MAAvB,EAA+B;AAC9B,YAAU,KAAV,GAAkB,IACjB,UAAU,IADO,EAEjB,UAAC,CAAD,EAAO;AACN,OAAI,MAAM,CAAV,EAAa;AACZ,WAAO,IAAP;AACA;;AAED,UAAO,IAAI,CAAX;AACA,GARgB,CAAlB;AAUA;;AAED,KAAI,UAAU,IAAV,KAAmB,MAAvB,EAA+B;AAC9B,YAAU,eAAV,GAA4B,OAC3B,MAAM,MAAN,CAAa,UAAU,IAAvB,EAA6B,UAAU,QAAvC,EAAiD,KAAjD,CAAuD,GAAvD,CAD2B,EAE3B,UAAC,SAAD,EAAY,YAAZ,EAA6B;AAC5B,OAAM,OAAO,aAAa,KAAb,CAAmB,GAAnB,CAAb;;AAEA,QAAK,CAAL,IAAU,SAAS,KAAK,CAAL,CAAT,EAAkB,EAAlB,CAAV;;AAEA,aAAU,KAAK,CAAL,CAAV,IAAqB,KAAK,CAAL,CAArB;;AAEA,UAAO,SAAP;AACA,GAV0B,EAW3B,EAX2B,CAA5B;AAaA;;AAED,KAAI,UAAU,IAAV,KAAmB,MAAvB,EAA+B;AAC9B,MAAM,UAAU,MAAM,MAAN,CAAa,UAAU,IAAvB,EAA6B,UAAU,QAAvC,EAAiD,KAAjD,CAAuD,GAAvD,CAAhB;;AAEA,YAAU,MAAV,GAAmB;AAClB,YAAS,SAAS,QAAQ,CAAR,CAAT,EAAqB,EAArB,CADS;AAElB,YAAS,QAAQ,CAAR,MAAe;AAFN,GAAnB;AAIA;;AAED,KAAI,UAAU,IAAV,KAAmB,MAAvB,EAA+B;AAC9B,YAAU,WAAV,GAAwB,IACvB,UAAU,IADa,EAEvB,UAAC,CAAD,EAAO;AACN,UAAO;AACN,yBAAqB,CAAC,EAAE,IAAI,YAAY,mBAAlB,CADhB;AAEN,wBAAoB,CAAC,EAAE,IAAI,YAAY,kBAAlB,CAFf;AAGN,iBAAa,CAAC,EAAE,IAAI,YAAY,WAAlB,CAHR;AAIN,aAAS,CAAC,EAAE,IAAI,YAAY,OAAlB;AAJJ,IAAP;AAMA,GATsB,CAAxB;AAWA;;AAED,KAAI,UAAU,IAAV,KAAmB,MAAvB,EAA+B;AAC9B,YAAU,kBAAV,GAA+B,IAC9B,MAAM,MAAN,CAAa,UAAU,IAAvB,EAA6B,UAAU,QAAvC,EAAiD,KAAjD,CAAuD,IAAvD,CAD8B,EAE9B,UAAC,KAAD;AAAA,UAAW,UAAU,EAAV,GAAe,IAAf,GAAsB,KAAjC;AAAA,GAF8B,CAA/B;AAIA;;AAED,QAAO,SAAP;AACA;;AAED,SAAS,cAAT,CAAwB,MAAxB,EAAgC;AAC/B,KAAM,YAAY,EAAlB;;AAEA,WAAU,IAAV,GAAiB,OAAO,WAAP,CAAmB,qBAAnB,CAAjB;;AAEA,KAAM,SAAS,OAAO,WAAP,EAAf;;AAEA,WAAU,QAAV,GAAqB,OAAO,WAAP,EAArB;;AAEA;AACA,WAAU,IAAV,GAAiB,OAAO,WAAP,CAAmB,SAAS,CAA5B,CAAjB;AACA;AACA,WAAU,IAAV,GAAiB,UAAU,IAAV,CAAe,KAAf,CAAqB,CAArB,EAAwB,CAAC,CAAzB,CAAjB;;AAEA,QAAO,kBAAkB,SAAlB,CAAP;AACA;;AAED,SAAS,SAAT,CAAmB,MAAnB,EAA2B,IAA3B,EAAiC;AAChC,KAAM,kBAAkB,OAAO,IAAP,KAAgB,OAAO,IAAP,EAAxC;;AAEA,KAAI,mBAAmB,uBAAvB,EAAgD;AAC/C,MAAM,YAAY,eAAe,MAAf,CAAlB;;AAEA,OAAK,UAAL,GAAkB,KAAK,UAAL,IAAmB,EAArC;AACA,OAAK,UAAL,CAAgB,UAAU,IAA1B,IAAkC,SAAlC;;AAEA,SAAO,UAAU,IAAjB;;AAEA,YAAU,MAAV,EAAkB,IAAlB;AACA;AACD;;AAED,SAAS,gBAAT,CAA0B,MAA1B,EAAkC,UAAlC,EAA8C;AAC7C,KAAM,OAAO,EAAb;;AAEA,WAAU,MAAV,EAAkB,IAAlB;;AAEA,KAAI,IAAI,IAAJ,EAAU,iBAAV,CAAJ,EAAkC;AACjC,OACC,QAAQ,WAAW,IAAnB,CADD,EAEC,UAAC,IAAD,EAAO,KAAP,EAAiB;AAChB,OAAM,IAAI,IAAV;;AAEA,OAAI,KAAK,UAAL,CAAgB,IAAhB,CAAqB,KAArB,CAA2B,KAA3B,MAAsC,IAA1C,EAAgD;AAC/C;AACA;;AAED,OAAM,gBAAgB,KAAK,UAAL,CAAgB,IAAhB,CAAqB,eAArB,CACrB,KAAK,UAAL,CAAgB,IAAhB,CAAqB,KAArB,CAA2B,KAA3B,CADqB,CAAtB;;AAIA,KAAE,QAAF,GAAa,aAAb;AACA,GAdF;AAgBA;;AAED,KAAI,IAAI,IAAJ,EAAU,iBAAV,CAAJ,EAAkC;AACjC,OAAK,UAAL,CAAgB,IAAhB,CAAqB,kBAArB,CAAwC,OAAxC,CACC,UAAC,IAAD,EAAO,KAAP,EAAiB;AAChB,OAAI,SAAS,IAAb,EAAmB;AAClB,QAAM,IAAI,KAAK,KAAL,CAAW,QAAQ,WAAW,MAAX,CAAkB,KAArC,CAAV;AACA,QAAM,IAAI,QAAQ,WAAW,MAAX,CAAkB,KAApC;;AAEA,eAAW,QAAX,CAAoB,CAApB,EAAuB,CAAvB,IAA4B,IAA5B;AACA;AACD,GARF;AAUA;;AAED,YAAW,WAAX,GAAyB,KAAK,UAA9B;;AAEA,YAAW,MAAX,GAAoB,IAAI,IAAJ,EAAU,wBAAV,CAApB;AACA;;AAED,SAAS,UAAT,CAAoB,MAApB,EAA4B,aAA5B,EAA2C;AAC1C,KAAM,QAAQ,EAAd;;AAEA,MAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,aAApB,EAAmC,GAAnC,EAAwC;AACvC,QAAM,IAAN,CAAW,OAAO,WAAP,EAAX;AACA;;AAED,QAAO,KAAP;AACA;;AAED,SAAS,qBAAT,CAA+B,OAA/B,EAAwC,QAAxC,EAAkD;AACjD,UAAS,YAAT,CAAsB,CAAtB,EAAyB,CAAzB,EAA4B;AAC3B,SAAO,QAAQ,CAAR,EAAW,CAAX,MAAkB,gBAAzB;AACA;;AAED,KAAM,QAAQ;AACb,UAAQ,EADK;AAEb,QAAM;AAFO,EAAd;;AAKA,KAAM,OAAO,EAAb;;AAEA,KAAM,QAAQ,QAAQ,CAAR,EAAW,MAAzB;AAAA,KAAiC,SAAS,QAAQ,MAAlD;;AAEA,KAAI,YAAY,CAAhB;;AAEA,KAAI,gBAAgB,CAApB;;AAEA,MAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,MAApB,EAA4B,GAA5B,EAAiC;AAChC,MAAM,MAAM,EAAZ;;AAEA,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAApB,EAA2B,GAA3B,EAAgC;AAC/B,OAAM,OAAO,EAAb;;AAEA,OAAI,aAAa,CAAb,EAAgB,CAAhB,CAAJ,EAAwB;AACvB,SAAK,WAAL,GAAmB,IAAnB;AACA,IAFD,MAGK;AACJ,SAAK,QAAL,GAAgB,QAAQ,CAAR,EAAW,CAAX,CAAhB;;AAEA,QAAI,OAAO,KAAX;AAAA,QAAkB,SAAS,KAA3B;;AAEA,QACC,CACC,MAAM,CAAN,IACA,aAAa,IAAI,CAAjB,EAAoB,CAApB,CAFD,KAIC,IAAI,CAAJ,GAAQ,KAAR,IACA,CAAC,aAAa,IAAI,CAAjB,EAAoB,CAApB,CANH,EAQE;AACD,cAAS,IAAT;AACA;;AAED,QACC,CACC,MAAM,CAAN,IACA,aAAa,CAAb,EAAgB,IAAI,CAApB,CAFD,KAIC,IAAI,CAAJ,GAAQ,MAAR,IACA,CAAC,aAAa,CAAb,EAAgB,IAAI,CAApB,CANH,EAQE;AACD,YAAO,IAAP;AACA;;AAED,QAAI,UAAU,IAAd,EAAoB;AACnB,UAAK,UAAL,GAAkB,EAAE,SAApB;AACA;;AAED,QAAI,MAAJ,EAAY;AACX,WAAM,MAAN,CAAa,SAAb,IAA0B,SAAS,eAAT,CAA1B;AACA;;AAED,QAAI,IAAJ,EAAU;AACT,WAAM,IAAN,CAAW,SAAX,IAAwB,SAAS,eAAT,CAAxB;AACA;AACD;;AAGD,OAAI,IAAJ,CAAS,IAAT;AACA;;AAED,OAAK,IAAL,CAAU,GAAV;AACA;;AAED,QAAO;AACN,YADM;AAEN;AAFM,EAAP;AAIA;;AAED,SAAS,eAAT,CAAyB,IAAzB,EAA+B;AAC9B,QAAO,KAAK,GAAL,CACN,UAAC,GAAD;AAAA,SAAS,IAAI,GAAJ,CACR,UAAC,IAAD,EAAU;AACT,OAAI,KAAK,WAAT,EAAsB;AACrB,WAAO,gBAAP;AACA;;AAED,OAAI,KAAK,QAAL,KAAkB,IAAtB,EAA4B;AAC3B,WAAO,GAAP;AACA;;AAED,UAAO,KAAK,QAAZ;AACA,GAXO,CAAT;AAAA,EADM,CAAP;AAeA;;AAED,SAAS,gBAAT,CAA0B,QAA1B,EAAoC;AACnC,QAAO,QAAQ,QAAR,EAAkB,GAAlB,CACN,UAAC,KAAD,EAAW;AACV,MAAI,UAAU,IAAd,EAAoB;AACnB,UAAO,gBAAP;AACA;;AAED,MAAI,UAAU,EAAd,EAAkB;AACjB,UAAO,GAAP;AACA;;AAED,SAAO,MAAM,CAAN,CAAP;AACA,EAXK,EAYL,IAZK,CAYA,EAZA,CAAP;AAaA;;AAED,SAAS,kBAAT,CAA4B,QAA5B,EAAsC,KAAtC,EAA6C;AAC5C,QAAO,MACN,SAAS,KAAT,CAAe,EAAf,CADM,EAEN,KAFM,EAGL,GAHK,CAIN,UAAC,GAAD;AAAA,SAAS,IAAI,GAAJ,CACR,UAAC,IAAD;AAAA,UAAU,SAAS,GAAT,GAAe,EAAf,GAAoB,IAA9B;AAAA,GADQ,CAAT;AAAA,EAJM,CAAP;AAQA;;AAED,SAAS,aAAT,CAAuB,UAAvB,EAAmC,QAAnC,EAA6C;AAC5C,KAAI,WAAW,KAAf,EAAsB;AACrB,aAAW,YAAY,MAAM,MAAN,CAAa,WAAW,KAAX,GAAmB,IAAhC,EAAsC,UAAU,QAAhD,CAAZ,EAAuE,QAAvE,CAAX;AACA;;AAED,KAAI,WAAW,MAAf,EAAuB;AACtB,aAAW,YAAY,MAAM,MAAN,CAAa,WAAW,MAAX,GAAoB,IAAjC,EAAuC,UAAU,QAAjD,CAAZ,EAAwE,QAAxE,CAAX;AACA;;AAGD,KAAI,WAAW,SAAf,EAA0B;AACzB,aAAW,YAAY,MAAM,MAAN,CAAa,WAAW,SAAX,GAAuB,IAApC,EAA0C,UAAU,QAApD,CAAZ,EAA2E,QAA3E,CAAX;AACA;;AAED,YAAW,QAAX,CAAoB,OAApB,CACC,UAAC,IAAD,EAAU;AACT,MAAI,IAAJ,EAAU;AACT,cAAW,YAAY,MAAM,MAAN,CAAa,IAAb,EAAmB,UAAU,QAA7B,CAAZ,EAAoD,QAApD,CAAX;AACA;AACD,EALF;;AAQA,KAAI,WAAW,KAAf,EAAsB;AACrB,aAAW,YAAY,MAAM,MAAN,CAAa,WAAW,KAAX,GAAmB,IAAhC,EAAsC,UAAU,QAAhD,CAAZ,EAAuE,QAAvE,CAAX;AACA;;AAED,QAAO,QAAP;AACA;;AAED,SAAS,eAAT,CAAyB,UAAzB,EAAqC,QAArC,EAA+C;AAC9C,KAAG,aAAa,SAAhB,EAA2B;AAC1B,aAAW,CAAX;AACA;;AAED,KAAM,SAAS,IAAI,MAAJ,CAAW,2BAAX,CAAf;;AAEA,QAAO,UAAP,CAAkB,WAAW,MAAX,CAAkB,KAApC,EAA2C,CAA3C;AACA,QAAO,UAAP,CAAkB,WAAW,MAAX,CAAkB,MAApC,EAA4C,CAA5C;AACA;AACA;AACA,QAAO,aAAP,CAAqB,WAAW,MAAX,CAAkB,aAAvC,EAAsD,CAAtD;AACA,QAAO,aAAP,CAAqB,WAAW,MAAX,CAAkB,UAAvC,EAAmD,CAAnD;AACA,QAAO,aAAP,CAAqB,WAAW,MAAX,CAAkB,aAAvC,EAAsD,CAAtD;AACA;;AAEA,QAAO,YAAY,MAAZ,EAAoB,QAApB,CAAP;AACA;;AAED,SAAS,eAAT,CAAyB,UAAzB,EAAqC,cAArC,EAAqD;AACpD,KAAI,WAAW,mBAAmB,SAAnB,GAA+B,gBAAgB,UAAhB,CAA/B,GAA6D,cAA5E;;AAEA,KAAI,SAAS,MAAM,MAAN,CAAa,WAAW,MAAxB,EAAgC,UAAU,QAA1C,CAAb;;AAEA,YAAW,YAAY,MAAZ,EAAoB,QAApB,CAAX;;AAEA,UAAS,MAAM,MAAN,CAAa,WAAW,QAAxB,EAAkC,UAAU,QAA5C,CAAT;;AAEA,YAAW,YAAY,MAAZ,EAAoB,QAApB,CAAX;;AAEA,YAAW,cAAc,UAAd,EAA0B,QAA1B,CAAX;;AAEA,QAAO,QAAP;AACA;;AAED,SAAS,cAAT,CAAwB,UAAxB,EAAoC;AACnC,KAAM,iBAAiB,gBAAgB,UAAhB,CAAvB;AACA,KAAM,iBAAiB,YAAY,MAAM,MAAN,CAAa,WAAW,MAAxB,EAAgC,UAAU,QAA1C,CAAZ,CAAvB;AACA,KAAM,mBAAmB,YAAY,MAAM,MAAN,CAAa,WAAW,QAAxB,EAAkC,UAAU,QAA5C,CAAZ,CAAzB;AACA,KAAM,eAAe,cAAc,UAAd,CAArB;;AAEA,KAAM,wBAAwB,UAA9B;;AAEA,KAAM,gBAAgB,IAAI,MAAJ,CAAW;AAChC;AACA,uBAAsB,UAAtB,CAAiC,CAAjC,IAAuC,iBAAiB,IAFxB,EAGhC,sBAAsB,UAAtB,CAAiC,CAAjC,IAAuC,iBAAiB,IAHxB,EAIhC,sBAAsB,UAAtB,CAAiC,CAAjC,IAAuC,mBAAmB,IAJ1B,EAKhC,sBAAsB,UAAtB,CAAiC,CAAjC,IAAuC,eAAe,IALtB,EAMhC,sBAAsB,UAAtB,CAAiC,CAAjC,IAAuC,CAAC,iBAAiB,MAAlB,KAA6B,CANpC,EAOhC,sBAAsB,UAAtB,CAAiC,CAAjC,IAAuC,CAAC,iBAAiB,MAAlB,KAA6B,CAPpC,EAQhC,sBAAsB,UAAtB,CAAiC,CAAjC,IAAuC,CAAC,mBAAmB,MAApB,KAA+B,CARtC,EAShC,sBAAsB,UAAtB,CAAiC,CAAjC,IAAuC,CAAC,eAAe,MAAhB,KAA2B;AAClE;AAVgC,EAAX,CAAtB;;AAcA,QAAO,aAAP;AACA;;AAED,SAAS,cAAT,CAAwB,UAAxB,EAAoC,KAApC,EAA2C,MAA3C,EAAmD;AAClD,KAAM,OAAO,WAAW,KAAX,CAAiB,IAAI,MAAJ,CAAW,SAAS,KAAT,GAAiB,GAA5B,EAAiC,GAAjC,CAAjB,CAAb;;AAEA,QAAO,MAAM,KAAN,EAAa,GAAb,CACN,UAAC,CAAD;AAAA,SAAO,MAAM,MAAN,EAAc,GAAd,CACN,UAAC,CAAD;AAAA,UAAO,KAAK,CAAL,EAAQ,CAAR,CAAP;AAAA,GADM,EAEL,IAFK,CAEA,EAFA,CAAP;AAAA,EADM,EAIL,IAJK,CAIA,EAJA,CAAP;AAKA;;AAED,SAAS,gBAAT,CAA0B,CAA1B,EAA6B,CAA7B,EAAgC;AAC/B;;;;;;;;;AAWA,KAAI,EAAE,KAAF,CAAQ,EAAR,CAAJ;;AAEA,QAAO,EAAE,KAAF,CAAQ,EAAR,EAAY,MAAZ,CACN,UAAC,GAAD,EAAM,CAAN,EAAY;AACX,MAAI,MAAM,gBAAV,EAA4B;AAC3B,OAAI,IAAJ,CAAS,CAAT;AACA,GAFD,MAGK;AACJ,OAAI,IAAJ,CAAS,EAAE,KAAF,EAAT;AACA;;AAED,SAAO,GAAP;AACA,EAVK,EAWN,EAXM,EAYL,IAZK,CAYA,EAZA,CAAP;AAaA;;AAED,SAAS,MAAT,CAAgB,GAAhB,EAAqB,GAArB,EAA0B;AACzB,QAAO,IAAI,KAAJ,CAAU,EAAV,EAAc,GAAd,CACN,UAAC,CAAD,EAAI,KAAJ,EAAc;AACb,MAAI,cAAc,CAAC,KAAK,OAAL,CAAa,CAAb,IAAkB,OAAO,IAAI,QAAQ,IAAI,MAAhB,CAAP,CAAnB,IAAsD,KAAK,MAA7E;;AAEA,MAAI,cAAc,CAAlB,EAAqB;AACpB,iBAAc,KAAK,MAAL,GAAc,WAA5B;AACA;;AAED,SAAO,KAAK,WAAL,CAAP;AACA,EATK,EAUL,IAVK,CAUA,EAVA,CAAP;AAWA;;AAED,SAAS,QAAT,CAAkB,GAAlB,EAAuB,GAAvB,EAA4B;AAC3B,QAAO,OACN,GADM,EAEN,IAAI,GAAJ,EAAS,UAAC,CAAD;AAAA,SAAO,CAAC,CAAR;AAAA,EAAT,CAFM,CAAP;AAIA;;AAED,SAAS,WAAT,CAAqB,GAArB,EAA0B;AACzB,QAAO,IAAI,KAAJ,CAAU,EAAV,EAAc,MAAd,CACN,UAAC,GAAD,EAAM,CAAN,EAAS,CAAT,EAAe;AACd;AACA,MAAI,IAAI,CAAJ,KAAU,CAAd,EAAiB;AAChB,OAAI,IAAJ,CAAS,CAAT;AACA;;AAED,SAAO,GAAP;AACA,EARK,EASN,EATM,EAUL,IAVK,CAUA,EAVA,CAAP;AAWA;;AAED,SAAS,UAAT,CAAoB,GAApB,EAAyB;AACxB,QAAO,YAAY,IAAI,SAAJ,CAAc,CAAd,CAAZ,IAAgC,YAAY,GAAZ,CAAvC;AACA;;AAED,SAAS,iBAAT,CAA2B,GAA3B,EAAgC,GAAhC,EAAqC;AACpC,KAAM,MAAM,IAAI,MAAhB;;AAEA,SAAQ,SAAS,GAAT,EAAc,iBAAd,EAAiC,GAAjC,EAAsC,KAAtC,CAA4C,EAA5C,CAAR,EAAyD,OAAzD,CACC,UAAC,CAAD,EAAO;AACN,QAAM,WAAW,GAAX,CAAN;AACA,QAAM,IAAI,SAAJ,CAAc,MAAM,CAApB,IAAyB,IAAI,SAAJ,CAAc,CAAd,EAAiB,MAAM,CAAvB,CAA/B;AACA,QAAM,SAAS,GAAT,EAAc,GAAd,CAAN;AACA,EALF;;AAQA,QAAO,GAAP;AACA;;AAGD,SAAS,QAAT,CAAkB,GAAlB,EAAuB;AACtB;AACA,KAAM,MAAM,KAAK,KAAL,CAAW,IAAI,MAAJ,GAAa,CAAxB,CAAZ;;AAEA,QAAO,IACN,IAAI,SAAJ,CAAc,GAAd,EAAmB,KAAnB,CAAyB,EAAzB,CADM,EAEN,IAAI,SAAJ,CAAc,CAAd,EAAiB,GAAjB,EAAsB,KAAtB,CAA4B,EAA5B,CAFM,EAGL,MAHK,CAIN,UAAC,GAAD,EAAM,KAAN,EAAgB;AACf,MAAI,MAAM,CAAN,MAAa,SAAb,IAA0B,MAAM,CAAN,MAAa,SAA3C,EAAsD;AACrD,UAAO,GAAP;AACA;;AAED,MAAI,IAAJ,CAAS,MAAM,CAAN,IAAW,MAAM,CAAN,CAApB;;AAEA,SAAO,GAAP;AACA,EAZK,EAaN;AACD;AAdO,GAeL,IAfK,CAeA,EAfA,KAeO,IAAI,MAAJ,GAAa,CAAb,GAAiB,IAAI,IAAI,MAAJ,GAAa,CAAjB,CAAjB,GAAuC,EAf9C,CAAP;AAgBA;;AAED,SAAS,eAAT,CAAyB,GAAzB,EAA8B,GAA9B,EAAmC;AAClC;;;;;;;;;;;AAaA,MACC,SAAS,GAAT,EAAc,iBAAd,EAAiC,GAAjC,CADD,EAEC,UAAC,CAAD,EAAO;AACN,QAAM,OAAO,GAAP,EAAY,GAAZ,CAAN;AACA,QAAM,IAAI,SAAJ,CAAc,CAAd,IAAmB,IAAI,SAAJ,CAAc,CAAd,EAAiB,CAAjB,CAAzB;AACA,QAAM,SAAS,GAAT,CAAN;AACA,EANF;;AASA,QAAO,GAAP;AACA;;AAED,SAAS,kBAAT,CAA4B,MAA5B,EAAoC,KAApC,EAA2C,MAA3C,EAAmD;AAClD,KAAM,aAAa,eAClB,iBAAiB,MAAjB,CADkB,EAElB,KAFkB,EAGlB,MAHkB,EAIjB,OAJiB,CAIT,sBAJS,EAIe,EAJf,CAAnB;;AAMA,QAAO,YAAY,MAAM,MAAN,CAAa,UAAb,EAAyB,UAAU,QAAnC,CAAZ,CAAP;AACA;;AAED,SAAS,kBAAT,CAA4B,UAA5B,EAAwC;AACvC,KAAM,iBAAiB,gBAAgB,UAAhB,CAAvB;;AAEA,KAAM,iBAAiB,gBAAgB,UAAhB,EAA4B,cAA5B,CAAvB;;AAEA,KAAM,gBAAgB,eAAe,UAAf,CAAtB;;AAEA,KAAM,YAAY;AACjB,UAAQ,cADS;AAEjB,UAAQ,cAFS;AAGjB,SAAO;AAHU,EAAlB;;AAMA,KAAM,SAAS,EAAf;;AAEA,KAAI,UAAU,MAAV,KAAqB,WAAW,MAAX,CAAkB,cAA3C,EAA2D;AAC1D,SAAO,IAAP,CAAY,+BAAZ;AACA;;AAED,KAAI,UAAU,MAAV,KAAqB,WAAW,MAAX,CAAkB,cAA3C,EAA2D;AAC1D,SAAO,IAAP,CAAY,+BAAZ;AACA;;AAED,KAAI,CAAC,UAAU,KAAV,CAAgB,MAAhB,CAAuB,WAAW,MAAX,CAAkB,aAAzC,CAAL,EAA8D;AAC7D,SAAO,IAAP,CAAY,8BAAZ;AACA;;AAED,MACC,WAAW,WADZ,EAEC,UAAC,SAAD,EAAY,IAAZ,EAAqB;AACpB,MAAI,UAAU,QAAV,KAAuB,YAAY,UAAU,IAAtB,CAA3B,EAAwD;AACvD,UAAO,IAAP,6BAAsC,IAAtC;AACA;AACD,EANF;;AASA,QAAO,MAAP;AACA;;AAED,SAAS,iBAAT,CAA2B,YAA3B,EAAyC,GAAzC,EAA8C;AAC7C,KAAM,SAAS,aAAa,MAA5B;AACA,KAAM,QAAQ,aAAa,CAAb,EAAgB,MAA9B;;AAEA,KAAI,iBAAiB,QACpB,iBAAiB,YAAjB,CADoB,EAEnB,IAFmB,CAEd,EAFc,CAArB;;AAIA,KAAM,aAAa,eAAe,cAAf,EAA+B,KAA/B,EAAsC,MAAtC,CAAnB;;AAEA,KAAM,OAAO,iBACZ,UADY,EAEZ,gBAAgB,WAAW,OAAX,CAAmB,sBAAnB,EAA2C,EAA3C,CAAhB,EAAgE,GAAhE,CAFY,CAAb;;AAKA,kBAAiB,eAAe,IAAf,EAAqB,MAArB,EAA6B,KAA7B,CAAjB;;AAEA,QAAO,MAAM,eAAe,KAAf,CAAqB,EAArB,CAAN,EAAgC,KAAhC,CAAP;AACA;;AAED,SAAS,mBAAT,CAA6B,UAA7B,EAAyC,GAAzC,EAA8C;AAC7C,KAAM,aAAa,eAClB,WAAW,MADO,EAElB,WAAW,MAAX,CAAkB,KAFA,EAGlB,WAAW,MAAX,CAAkB,MAHA,CAAnB;;AAMA,KAAM,OAAO,iBACZ,UADY,EAEZ,kBACC,WAAW,OAAX,CAAmB,sBAAnB,EAA2C,EAA3C,CADD,EAEC,GAFD,CAFY,CAAb;;AAQA,KAAM,SAAS,eACd,IADc,EAEd,WAAW,MAAX,CAAkB,MAFJ,EAGd,WAAW,MAAX,CAAkB,KAHJ,CAAf;;AAMA,KAAI,WAAW,WAAW,MAA1B,EAAkC;AACjC,QAAM,IAAI,KAAJ,CAAU,4EAAV,CAAN;AACA;;AAED,QAAO,MAAP;AACA;;AAED,SAAS,YAAT,CAAsB,UAAtB,EAAkC,OAAlC,EAA2C;AAC1C,KAAM,uBAAuB,IAAI,MAAJ,CAAW,sBAAX,CAA7B;;AAEA,sBAAqB,aAArB,CAAmC,gBAAgB,UAAhB,CAAnC;;AAEA,KAAM,uBAAuB,IAAI,MAAJ,CAAW,sBAAX,CAA7B;;AAEA,sBAAqB,aAArB,CAAmC,gBAAgB,UAAhB,CAAnC;;AAEA,KAAM,sBAAsB,eAAe,UAAf,CAA5B;;AAEA,KAAM,0BAA0B,IAAI,MAAJ,CAAW,sBAAX,CAAhC;;AAEA,KAAI,IAAI,OAAJ,EAAa,WAAb,CAAJ,EAA+B;AAC9B,0BAAwB,aAAxB,CACC,mBACC,WAAW,iBADZ,EAEC,WAAW,MAAX,CAAkB,KAFnB,EAGC,WAAW,MAAX,CAAkB,MAHnB,CADD;AAOA,EARD,MASK;AACJ,0BAAwB,IAAxB,CAA6B,GAA7B;AACA;;AAED,KAAM,sBAAsB,IAAI,MAAJ,CAAW,6BAAX,CAA5B;;AAEA,qBAAoB,aAApB,CAAkC,WAAW,MAAX,CAAkB,aAApD;;AAEA,KAAM,mBAAmB,IAAI,MAAJ,CAAW,yBAAX,CAAzB;;AAEA,kBAAiB,aAAjB,CAA+B,WAAW,MAAX,CAAkB,UAAjD;;AAEA,KAAM,sBAAsB,IAAI,MAAJ,CAAW,4BAAX,CAA5B;;AAEA,qBAAoB,aAApB,CAAkC,WAAW,MAAX,CAAkB,aAApD;;AAEA,QAAO,OAAO,MAAP,CACN,CACC,oBADD,EAEC,MAAM,MAAN,CAAa,eAAb,EAA8B,UAAU,QAAxC,CAFD,EAGC,oBAHD,EAIC,mBAJD,EAKC,MAAM,MAAN,CAAa,IAAI,OAAJ,EAAa,SAAb,EAAwB,KAAxB,IAAiC,IAA9C,EAAoD,UAAU,QAA9D,CALD;AAMC;AACA,KAAI,MAAJ,CAAW,CAAC,GAAD,EAAM,GAAN,CAAX,CAPD,EAQC,uBARD;AASC;AACA,KAAI,MAAJ,CAAW,oBAAX,EAAiC,IAAjC,CAAsC,GAAtC,CAVD,EAWC,IAAI,MAAJ,CAAW,CAAC,WAAW,MAAX,CAAkB,KAAnB,CAAX,CAXD,EAYC,IAAI,MAAJ,CAAW,CAAC,WAAW,MAAX,CAAkB,MAAnB,CAAX,CAZD,EAaC,mBAbD,EAcC,gBAdD,EAeC,mBAfD,CADM,EAkBN,oBAlBM,CAAP;AAoBA;;AAED,SAAS,eAAT,CAAyB,eAAzB,EAA0C,aAA1C,EAAyD;AACxD,KAAM,eAAe,IAAI,MAAJ,CAAW,8BAAX,CAArB;AACA,cAAa,aAAb,CAA2B,gBAAgB,MAA3C;;AAEA,KAAM,iBAAiB,IAAI,MAAJ,CAAW,sBAAX,CAAvB;AACA,gBAAe,aAAf,CAA6B,YAAY,eAAZ,CAA7B;;AAEA,QAAO,OAAO,MAAP,CACN,CACC,MAAM,MAAN,CAAa,aAAb,EAA4B,UAAU,QAAtC,CADD,EAEC,YAFD,EAGC,cAHD,EAIC,eAJD,EAKC,IAAI,MAAJ,CAAW,CAAC,CAAD,CAAX,CALD,CADM,EAQN,wBAAwB,8BAAxB,GAAyD,sBAAzD,GAAkF,gBAAgB,MAAlG,GAA2G,CARrG,CAAP;AAUA;;AAED,SAAS,UAAT,CAAoB,WAApB,EAAiC,cAAjC,EAAiD;AAChD,KAAM,aAAa,IAAI,MAAJ,CAClB,YAAY,GAAZ,CACC,UAAC,IAAD,EAAO,KAAP,EAAiB;AAChB,MAAM,cAAc,QACnB,cADmB,EAEnB,UAAC,YAAD;AAAA,UAAkB,aAAa,KAAb,CAAmB,QAAnB,CAA4B,KAA5B,CAAlB;AAAA,GAFmB,CAApB;;AAKA,MAAI,gBAAgB,SAApB,EAA+B;AAC9B,UAAO,CAAP;AACA;;AAED,SAAO,SAAS,WAAT,EAAsB,EAAtB,IAA4B,CAAnC;AACA,EAZF,CADkB,CAAnB;;AAiBA,QAAO,gBAAgB,UAAhB,EAA4B,MAA5B,CAAP;AACA;;AAED,SAAS,UAAT,CAAoB,cAApB,EAAoC;AACnC,KAAM,aAAa,MAAM,MAAN,CAClB,OAAO,IAAP,CAAY,cAAZ,EAA4B,GAA5B,CACC,UAAC,GAAD;AAAA,SAAY,SAAS,GAAT,EAAc,sBAAd,EAAsC,GAAtC,CAAZ,SAA0D,eAAe,GAAf,EAAoB,QAA9E;AAAA,EADD,EAEE,IAFF,CAEO,EAFP,CADkB,EAIlB,UAAU,QAJQ,CAAnB;;AAOA,QAAO,gBAAgB,UAAhB,EAA4B,MAA5B,CAAP;AACA;;AAED,SAAS,UAAT,CAAoB,iBAApB,EAAuC;AACtC,KAAM,aAAa,MAAM,MAAN,CAClB,kBAAkB,GAAlB,CACC,UAAC,QAAD,EAAc;AACb,MAAI,SAAS,MAAT,GAAkB,CAAtB,EAAyB;AACxB,UAAU,QAAV;AACA;;AAED,SAAO,IAAP;AACA,EAPF,EAQE,IARF,CAQO,EARP,CADkB,EAUlB,UAAU,QAVQ,CAAnB;;AAaA,QAAO,gBAAgB,UAAhB,EAA4B,MAA5B,CAAP;AACA;;AAED,SAAS,UAAT,CAAoB,MAApB,EAA4B;AAC3B,QAAO,gBACN,MAAM,MAAN,CACI,OAAO,OADX,UACsB,OAAO,OAAP,GAAiB,GAAjB,GAAuB,GAD7C,GAEC,UAAU,QAFX,CADM,EAKN,MALM,CAAP;AAOA;;AAED,SAAS,WAAT,CAAqB,WAArB,EAAkC,iBAAlC,EAAqD,UAArD,EAAiE;AAChE,KAAI,cAAc,CAAlB;;AAEA,KAAM,iBAAiB,QAAQ,WAAR,EAAqB,MAArB,CACtB,UAAC,SAAD,EAAY,YAAZ,EAA0B,SAA1B,EAAwC;AACvC,MAAI,gBAAgB,aAAa,MAAb,GAAsB,CAA1C,EAA6C;AAC5C,OAAM,MAAM,QAAQ,SAAR,EAAmB,EAAC,UAAU,YAAX,EAAnB,CAAZ;;AAEA,OAAI,QAAQ,SAAZ,EAAuB;AACtB,cAAU,EAAE,WAAZ,IAA2B;AAC1B,eAAU,YADgB;AAE1B,YAAO,CAAC,SAAD;AAFmB,KAA3B;AAIA,IALD,MAMK;AACJ,cAAU,GAAV,EAAe,KAAf,CAAqB,IAArB,CAA0B,SAA1B;AACA;AACD;;AAED,SAAO,SAAP;AACA,EAjBqB,EAkBtB,EAlBsB,CAAvB;;AAqBA,KAAM,aAAa,WAAW,WAAX,EAAwB,cAAxB,CAAnB;;AAEA,KAAM,aAAa,WAAW,cAAX,CAAnB;;AAEA,KAAM,aAAa,WAAW,iBAAX,CAAnB;;AAEA,KAAM,UAAU,CACf,UADe,EAEf,UAFe,EAGf,UAHe,CAAhB;;AAMA,KAAI,oBAAoB,WAAW,MAAX,GAAoB,WAAW,MAA/B,GAAwC,WAAW,MAA3E;;AAEA,KAAI,WAAW,MAAf,EAAuB;AACtB,MAAM,aAAa,WAAW,WAAW,MAAtB,CAAnB;AACA,UAAQ,IAAR,CAAa,UAAb;;AAEA,uBAAqB,WAAW,MAAhC;AACA;;AAED,QAAO,OAAO,MAAP,CACN,OADM,EAEN,iBAFM,CAAP;AAIA;;AAED,SAAS,YAAT,CAAsB,IAAtB,EAA4B,OAA5B,EAAqC;AACpC,KAAM,OAAO,EAAb;;AAEA,KAAM,SAAS,IAAI,SAAJ,CAAc,IAAd,CAAf;;AAEA,MAAK,MAAL,GAAc,YAAY,MAAZ,EAAoB,OAApB,CAAd;;AAEA,KAAM,gBAAgB,KAAK,MAAL,CAAY,KAAZ,GAAoB,KAAK,MAAL,CAAY,MAAtD;;AAEA,MAAK,MAAL,GAAc,OAAO,WAAP,CAAmB,aAAnB,CAAd;;AAEA,KAAI,KAAK,MAAL,CAAY,aAAZ,KAA8B,eAAe,MAAjD,EAAyD;AACxD,OAAK,iBAAL,GAAyB,oBACxB;AACC,WAAQ,KAAK,MADd;AAEC,WAAQ,KAAK;AAFd,GADwB,EAKxB,QAAQ,WALgB,CAAzB;AAOA,EARD,MASK;AACJ,OAAK,iBAAL,GAAyB,KAAK,MAA9B;AACA;;AAED,MAAK,QAAL,GAAgB,OAAO,WAAP,CAAmB,aAAnB,CAAhB;;AAEA,MAAK,KAAL,GAAa,OAAO,WAAP,EAAb;;AAEA,MAAK,MAAL,GAAc,OAAO,WAAP,EAAd;;AAEA,MAAK,SAAL,GAAiB,OAAO,WAAP,EAAjB;;AAEA,MAAK,QAAL,GAAgB,WAAW,MAAX,EAAmB,KAAK,MAAL,CAAY,aAA/B,CAAhB;;AAEA,KAAM,eAAe,sBACpB,mBAAmB,KAAK,iBAAxB,EAA2C,KAAK,MAAL,CAAY,KAAvD,CADoB,EAEpB,KAAK,QAFe,CAArB;;AAKA,MAAK,IAAL,GAAY,aAAa,IAAzB;AACA,MAAK,KAAL,GAAa,aAAa,KAA1B;;AAEA,MAAK,KAAL,GAAa,OAAO,WAAP,EAAb;;AAEC,kBAAiB,MAAjB,EAAyB,IAAzB;;AAEA,QAAO,IAAP;AACD;;AAED,SAAS,cAAT,CAAwB,MAAxB,EAAgC;AAC/B,KAAM,kBAAkB,mBAAmB,MAAnB,CAAxB;;AAEA,KAAM,SAAS,EAAf;;AAEA,KAAI,eAAJ,EAAqB;AACpB,SAAO,IAAP,kCAAe,eAAf;AACA;;AAED,QAAO,OAAO,MAAP,KAAkB,CAAlB,GAAsB,SAAtB,GAAkC,MAAzC;AACA;;AAED,SAAS,cAAT,CAAwB,IAAxB,EAA8B,OAA9B,EAAuC;AACtC,QAAO,IAAI,OAAJ,CACN,UAAC,OAAD,EAAU,MAAV,EAAqB;AACpB,MAAI;AACH,OAAM,aAAa,aAAa,IAAb,EAAmB,OAAnB,CAAnB;;AAEA,OAAM,SAAS,eAAe,UAAf,CAAf;;AAEA,OAAI,WAAW,SAAf,EAA0B;AACzB,mCAA6B,OAAO,IAAP,CAAY,MAAZ,CAA7B;AACA,IAFD,MAGK;AACJ,YAAQ;AACP,WAAM;AACL,aAAO,WAAW,KAAX,IAAoB,SADtB;AAEL,cAAQ,WAAW,MAAX,IAAqB,SAFxB;AAGL,iBAAW,WAAW,SAAX,IAAwB,SAH9B;AAIL,aAAO,WAAW,KAAX,IAAoB;AAJtB,MADC;AAOP,WAAM,WAAW,IAPV;AAQP,YAAO,WAAW,KARX;AASP,mBAAc,mBAAmB,WAAW,QAA9B,EAAwC,WAAW,MAAX,CAAkB,KAA1D,CATP;AAUP,iBAAY;AACX,cAAQ,WAAW;AADR;AAVL,KAAR;AAcA;AACD,GAxBD,CAyBA,OAAM,GAAN,EAAW;AACV,UAAO,GAAP;AACA;AACD,EA9BK,CAAP;AAgCA;;AAED;;;;;;IAKM,S;;;;;;;;AACL;;;;;;;;;;;;;;;;;;wBAkBM,I,EAAM,O,EAAS;AACpB,aAAU,WAAW,EAArB;;AAEA,UAAO,eAAe,IAAf,EAAqB,OAArB,EAA8B,IAA9B,CACN,UAAC,UAAD;AAAA,WAAgB,IAAI,MAAJ,CAAW,UAAX,CAAhB;AAAA,IADM,CAAP;AAGA;;;iCAEc,I,EAAM,O,EAAS;AAC7B,aAAU,WAAW,EAArB;;AAEA,UAAO,eAAe,IAAf,EAAqB,OAArB,EAA8B,IAA9B,CACN,UAAC,UAAD;AAAA,WAAgB,IAAI,eAAJ,CAAoB,UAApB,CAAhB;AAAA,IADM,CAAP;AAGA;;AAED;;;;;;;;;;;;;;;;;;;;;;2BAmBS,M,EAAQ,O,EAAS;AACzB,YAAS,OAAO,MAAP,EAAT;;AAEA,OAAM,gBAAgB,KAAK,OAAO,KAAP,CAAa,MAAlB,IAA4B,KAAK,OAAO,KAAP,CAAa,IAAlB,CAAlD;AACA,OAAM,aAAa,YAAY,MAA/B;AACA,OAAI,gBAAgB,eAAe,QAAnC;;AAEA,aAAU,WAAW,EAArB;;AAEA,OAAM,SAAS,OAAO,IAAP,CAAY,MAA3B;AACA,OAAM,QAAQ,OAAO,IAAP,CAAY,CAAZ,EAAe,MAA7B;;AAEA,OAAM,QAAQ,OAAO,IAAP,CAAY,KAAZ,IAAqB,EAAnC;;AAEA,OAAI,cAAc,gBAAgB,OAAO,IAAvB,CAAlB;AACA,OAAI,+BAAJ;;AAEA,OAAI,QAAQ,SAAZ,EAAuB;AACtB,QACC,CAAC,QAAQ,WAAT,IACA,OAAO,QAAQ,WAAf,IAA8B,iBAD9B,IAEA,OAAO,QAAQ,WAAf,IAA8B,iBAH/B,EAIE;AACD,WAAM,IAAI,KAAJ,8EAAqF,QAAQ,WAA7F,CAAN;AACA;;AAED,6BAAyB,WAAzB;AACA,kBAAc,kBAAkB,WAAlB,EAA+B,QAAQ,WAAvC,CAAd;;AAEA,oBAAgB,eAAe,MAA/B;AACA;;AAED,OAAM,uBAAuB,QAAQ,WAAR,CAA7B;AACA,OAAM,kCAAkC,QAAQ,0BAA0B,WAAlC,CAAxC;;AAEA,OAAM,eAAe,OAAO,YAAP,CAAoB,GAApB,CACpB,UAAC,GAAD;AAAA,WAAS,IAAI,GAAJ,CACR,UAAC,QAAD,EAAc;AACb,SAAI,aAAa,IAAjB,EAAuB;AACtB,aAAO,gBAAP;AACA;;AAED,SAAI,aAAa,EAAjB,EAAqB;AACpB,aAAO,GAAP;AACA;;AAED,YAAO,QAAP;AACA,KAXO,CAAT;AAAA,IADoB,CAArB;;AAgBA,OAAM,oBAAoB,QAAQ,YAAR,CAA1B;;AAEA,OAAM,WAAW,QAAQ,QAAQ,OAAO,IAAf,EAAqB,GAArB,CAAyB,UAAC,IAAD;AAAA,WAAU,KAAK,UAAf;AAAA,IAAzB,CAAR,EAA6D,MAA7D,CAChB,UAAC,UAAD,EAAa,UAAb,EAA4B;AAC3B,QAAI,OAAO,KAAP,CAAa,MAAb,CAAoB,UAApB,MAAoC,SAAxC,EAAmD;AAClD,gBAAW,IAAX,CAAgB,OAAO,KAAP,CAAa,MAAb,CAAoB,UAApB,CAAhB;AACA;;AAED,QAAI,OAAO,KAAP,CAAa,IAAb,CAAkB,UAAlB,MAAkC,SAAtC,EAAiD;AAChD,gBAAW,IAAX,CAAgB,OAAO,KAAP,CAAa,IAAb,CAAkB,UAAlB,CAAhB;AACA;;AAED,WAAO,UAAP;AACA,IAXe,EAYhB,EAZgB,CAAjB;;AAeA,OAAM,aAAa;AAClB,YAAQ;AACP,iBADO;AAEP,mBAFO;AAGP,iCAHO;AAIP,2BAJO;AAKP;AALO,KADU;AAQlB,YAAQ,iBAAiB,oBAAjB,CARU;AASlB,uBAAmB,iBAAiB,+BAAjB,CATD;AAUlB,cAAU,iBAAiB,YAAjB,CAVQ;AAWlB,WAAO,OAAO,IAAP,CAAY,KAXD;AAYlB,YAAQ,OAAO,IAAP,CAAY,MAZF;AAalB,eAAW,OAAO,IAAP,CAAY,SAbL;AAclB,sBAdkB;AAelB;AAfkB,IAAnB;;AAkBA,OAAM,eAAe,aAAa,UAAb,EAAyB,OAAzB,CAArB;;AAEA,OAAM,qBAAqB,MAAM,MAAN,CAC1B,iBAAiB,WAAjB,CAD0B,EAE1B,UAAU,QAFgB,CAA3B;;AAKA,OAAM,2BAA2B,MAAM,MAAN,CAChC,kBAAkB,GAAlB,CACC,UAAC,QAAD;AAAA,WAAc,SAAS,CAAT,CAAd;AAAA,IADD,EAEE,IAFF,CAEO,EAFP,CADgC,EAIhC,UAAU,QAJsB,CAAjC;;AAOA,OAAM,oBAAoB,MAAM,MAAN,EAAgB,OAAO,IAAP,CAAY,KAAZ,IAAqB,EAArC,UAA6C,UAAU,QAAvD,CAA1B;AACA,OAAM,qBAAqB,MAAM,MAAN,EAAgB,OAAO,IAAP,CAAY,MAAZ,IAAsB,EAAtC,UAA8C,UAAU,QAAxD,CAA3B;AACA,OAAM,wBAAwB,MAAM,MAAN,EAAgB,OAAO,IAAP,CAAY,SAAZ,IAAyB,EAAzC,UAAiD,UAAU,QAA3D,CAA9B;;AAEA,OAAM,oBAAoB,MAAM,MAAN,CAAgB,SAAS,IAAT,CAAc,IAAd,CAAhB,SAAyC,UAAU,QAAnD,CAA1B;;AAEA,OAAM,oBAAoB,MAAM,MAAN,CAAgB,KAAhB,SAA2B,UAAU,QAArC,CAA1B;;AAEA,OAAM,UAAU,CACf,YADe,EAEf,kBAFe,EAGf,wBAHe,EAIf,iBAJe,EAKf,kBALe,EAMf,qBANe,EAOf,iBAPe,EAQf,iBARe,CAAhB;;AAWA,OAAI,oBAAoB,aAAa,MAAb,GAAsB,mBAAmB,MAAzC,GACvB,yBAAyB,MADF,GACW,kBAAkB,MAD7B,GAEvB,mBAAmB,MAFI,GAEK,sBAAsB,MAF3B,GAGvB,kBAAkB,MAHK,GAGI,kBAAkB,MAH9C;;AAKA,OACC,gCAAgC,IAAhC,CAAqC,UAAC,QAAD;AAAA,WAAc,SAAS,MAAT,GAAkB,CAAhC;AAAA,IAArC,CADD,EAEE;AACD,QAAM,cAAc,YACnB,+BADmB,EAEnB,iBAFmB,EAGnB,OAAO,UAAP,IAAqB,EAHF,CAApB;;AAMA,YAAQ,IAAR,CAAa,WAAb;;AAEA,yBAAqB,YAAY,MAAjC;AACA;;AAED,UAAO,OAAO,MAAP,CAAc,OAAd,EAAuB,iBAAvB,CAAP;AACA;;;;;;AAGF,UAAU,OAAO,OAAP,GAAiB,SAA3B;;;;;;;;;;AC1sCA,IAAM,WAAe,QAAQ,iBAAR,CAArB;AACA,IAAM,KAAe,QAAQ,IAAR,CAArB;AACA,IAAM,eAAe,QAAQ,eAAR,CAArB;AACA,IAAM,QAAe,QAAQ,YAAR,CAArB;;AAEA,IAAM,WAAW,YAAjB;;AAEA,IAAM,mBAAmB,CAAzB;;AAEA,IAAM,mBAAmB,CAAzB;;AAEA,IAAM,+BAA+B,EAArC;;IAEM,S,GAGL,mBAAY,GAAZ,EAAiB;AAAA;;AAAA;;AAAA,MAqBjB,WArBiB,GAqBH,UAAC,MAAD;AAAA,SAAY,MAAK,aAAL,CAAmB,UAAnB,CAA8B,MAA9B,CAAZ;AAAA,EArBG;;AAAA,MAuBjB,KAvBiB,GAuBT,UAAC,QAAD,EAAW,UAAX,EAA0B;AACjC,eAAa,cAAc,EAAE,OAAO,IAAT,EAA3B;;AAEA,MAAI,WAAW,KAAf,EAAsB;AACrB,SAAK,aAAL,CAAmB,IAAnB,CAAwB,QAAxB;AACA,GAFD,MAGK,IAAI,WAAW,OAAf,EAAwB;AAC5B,SAAK,aAAL,CAAmB,IAAnB,CAAwB,QAAxB;AACA;;AAED;AACA,EAlCgB;;AAAA,MAoCjB,UApCiB,GAoCJ;AAAA,SAAM,MAAK,WAAL,CAAiB,CAAjB,EAAoB,SAApB,CAA8B,CAA9B,CAAN;AAAA,EApCI;;AAAA,MAsCjB,WAtCiB,GAsCH;AAAA,SAAM,MAAK,WAAL,CAAiB,gBAAjB,EAAmC,YAAnC,CAAgD,CAAhD,CAAN;AAAA,EAtCG;;AAAA,MAwCjB,WAxCiB,GAwCH;AAAA,SAAM,MAAK,WAAL,CAAiB,gBAAjB,EAAmC,YAAnC,CAAgD,CAAhD,CAAN;AAAA,EAxCG;;AAAA,MA0CjB,WA1CiB,GA0CH,UAAC,MAAD,EAAY;AACzB,MAAI,eAAe,UAAU,4BAA7B;;AAEA,MAAM,OAAO,MAAK,IAAL,EAAb;AACA,MAAM,kBAAkB,MAAK,IAAL,EAAxB;;AAEA,MAAI,kBAAkB,YAAlB,GAAiC,IAArC,EAA2C;AAC1C,kBAAe,OAAO,eAAtB;AACA;;AAED,MAAI,iBAAiB,CAArB,EAAwB;AACvB,UAAO,EAAP;AACA;;AAED,MAAM,SAAS,MAAK,WAAL,CAAiB,YAAjB,CAAf;AACA,MAAI,MAAM,MAAM,MAAN,CAAa,MAAb,EAAqB,QAArB,CAAV;;AAEA,MAAI,MAAJ,EAAY;AACX,UAAO,GAAP;AACA;;AAED,MAAM,YAAY,IAAI,OAAJ,CAAY,IAAZ,CAAlB;;AAEA,MAAI,aAAa,CAAjB,EAAoB;AACnB,OAAM,aAAa,YAAY,IAAI,MAAnC;;AAEA,OAAI,aAAa,CAAjB,EAAoB;AACnB,UAAK,KAAL,CAAW,aAAa,CAAxB,EAA2B,EAAE,SAAS,IAAX,EAA3B;;AAEA,UAAM,IAAI,SAAJ,CAAc,CAAd,EAAiB,SAAjB,CAAN;AACA;AACD,GARD,MASK;AACJ,SAAM,MAAM,MAAK,WAAL,EAAZ;AACA;;AAED,SAAO,GAAP;AACA,EA/EgB;;AAAA,MAiFjB,IAjFiB,GAiFV;AAAA,SAAM,MAAK,WAAX;AAAA,EAjFU;;AAAA,MAmFjB,IAnFiB,GAmFV;AAAA,SAAM,MAAK,aAAL,CAAmB,IAAnB,EAAN;AAAA,EAnFU;;AAChB,KAAI,gBAAJ;;AAEA,KAAI,SAAS,GAAT,CAAJ,EAAmB;AAClB;AACA,YAAU,GAAG,YAAH,CAAgB,GAAhB,CAAV;AACA,EAHD,MAIK,IAAI,eAAe,MAAnB,EAA2B;AAC/B;AACA,YAAU,GAAV;AACA,EAHI,MAIA,IAAI,eAAe,WAAnB,EAAgC;AACpC;AACA,YAAU,IAAI,MAAJ,CAAW,IAAI,UAAJ,CAAe,GAAf,CAAX,CAAV;AACA;;AAED,MAAK,aAAL,GAAqB,IAAI,YAAJ,CAAiB,OAAjB,CAArB;;AAEA,MAAK,WAAL,GAAmB,QAAQ,MAA3B;AACA,C;;AAtBI,S,CACE,Q,GAAW,Q;;;AAwFnB,OAAO,OAAP,GAAiB,UAAU,SAA3B",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "/**\n * XPuz index\n *\n * Exports the public API for the XPuz module\n *\n * @memberof xpuz\n */\n\nconst Puzzle = require(\"./lib/puzzle\");\nconst ImmutablePuzzle = require(\"./lib/immutable-puzzle\");\n\nexports = module.exports = {\n\t/**\n\t * Puzzle file parser constructors\n\t *\n\t * @type object\n\t * @property {function} IPUZ - .ipuz file parser\n\t * @property {function} PUZ - .puz file parser\n\t * @property {function} JPZ - .jpz file parser\n\t */\n\tParsers: {\n\t\tIPUZ: require(\"./parsers/ipuz\"),\n\t\tPUZ: require(\"./parsers/puz\"),\n\t\tJPZ: require(\"./parsers/jpz\"),\n\t},\n\n\t/**\n\t * Puzzle object constructor\n\t *\n\t * @type function\n\t * @see {@link xpuz.Puzzle}\n\t */\n\tPuzzle,\n\n\t/**\n\t * ImmutablePuzzle object constructor\n\t *\n\t * @type function\n\t * @see {@link xpuz.ImmutablePuzzle}\n\t */\n\tImmutablePuzzle,\n\n\tconvertPuzzleToImmutablePuzzle(puzzle) {\n\t\treturn new ImmutablePuzzle({\n\t\t\tgrid: puzzle.grid,\n\t\t\tclues: puzzle.clues,\n\t\t\tuserSolution: puzzle.userSolution,\n\t\t\tinfo: puzzle.info,\n\t\t\textensions: puzzle.extensions,\n\t\t});\n\t},\n\n\tconvertImmutablePuzzleToPuzzle(immutablePuzzle) {\n\t\treturn new Puzzle({\n\t\t\tgrid: immutablePuzzle.grid.toJS(),\n\t\t\tclues: immutablePuzzle.clues.toJS(),\n\t\t\tuserSolution: immutablePuzzle.userSolution.toJS(),\n\t\t\tinfo: immutablePuzzle.info.toJS(),\n\t\t\textensions: immutablePuzzle.extensions.toJS(),\n\t\t});\n\t},\n};\n",
    "const {\n\tList,\n\tMap,\n\tRecord,\n\tis,\n\tCollection,\n\tfromJS\n}                 = require(\"immutable\");\nconst PuzzleMixin = require(\"./puzzle-mixin\");\n\nconst infoSchema = {\n\ttitle: \"\",\n\tauthor: \"\",\n\tpublisher: \"\",\n\tcopyright: \"\",\n\tdifficulty: \"\",\n\tintro: \"\",\n};\n\nclass PuzzleInfo extends Record(infoSchema, \"PuzzleInfo\") {}\n\nconst schema = {\n\tgrid: List(),\n\tclues: Map({\n\t\tacross: Map(),\n\t\tdown: Map(),\n\t}),\n\tuserSolution: List(),\n\tinfo: new PuzzleInfo(),\n\textensions: Map(),\n};\n\n/**\n * Represents an immutable version of {@link xpuz.Puzzle|Puzzle}.\n *\n * @extends external:Immutable.Record\n * @memberof xpuz\n *\n * @mixes xpuz.PuzzleMixin\n */\nclass ImmutablePuzzle extends Record(schema, \"ImmutablePuzzle\") {\n\t/**\n\t * @param {object} args - the constructor arguments\n\t * @param {Types.ImmutableGrid|Types.Grid} args.grid - the grid for the puzzle\n\t * @param {{across: object, down: object}|external:Immutable.Map<{across: external:Immutable.Map, down: external:Immutable.Map}>} args.clues - the\n\t *\tpuzzle clues\n\t * @param {Array<string[]>|external:Immutable.List<external:Immutable.List<string>>} [args.userSolution] - the guesses that the user\n\t *\thas entered for this puzzle, as a two-dimensional array of array of strings with the same dimensions as the `grid` where\n\t *\teach cell is either a string with the user's input or `null` if it corresponds to a block cell in the grid\n\t * @param {xpuz.PuzzleInfo|object} [args.info] - information about the puzzle\n\t * @param {object} [args.extensions] - a store of extra, possibly implementation-dependent information about the puzzle (such as timer information)\n\t */\n\tconstructor({\n\t\tgrid,\n\t\tclues,\n\t\tuserSolution,\n\t\tinfo,\n\t\textensions\n\t}) {\n\t\tif (!(info instanceof PuzzleInfo)) {\n\t\t\tinfo = new PuzzleInfo(info);\n\t\t}\n\n\t\tgrid = grid ? ImmutablePuzzle.processGrid(fromJS(grid)) : List();\n\n\t\tconst args = {\n\t\t\tinfo,\n\t\t\tgrid,\n\t\t\tuserSolution: userSolution ?\n\t\t\t\tfromJS(userSolution) :\n\t\t\t\tgrid.map(\n\t\t\t\t\t(row) => row.map(\n\t\t\t\t\t\t(cell) => cell.get(\"isBlockCell\") ? null : \"\"\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t};\n\n\t\tif (clues) {\n\t\t\targs.clues = fromJS(clues);\n\t\t}\n\n\t\tif (extensions) {\n\t\t\targs.extensions = fromJS(extensions);\n\t\t}\n\n\t\tsuper(args);\n\t}\n\n\t/**\n\t * The grid for this puzzle\n\t *\n\t * @member {Types.ImmutableGrid} grid\n\t * @instance\n\t */\n}\n\nPuzzleMixin({\n\tconstructor: ImmutablePuzzle,\n\tequalityTest: is,\n\tgetter: (obj, path) => obj.getIn(path),\n\tsetter: (obj, path, value) => obj.setIn(path, value instanceof Collection ? value : fromJS(value)),\n\tsizeOf: (obj) => obj.size,\n});\n\nconst oldProcessGrid = ImmutablePuzzle.processGrid;\n\nImmutablePuzzle.processGrid = function processGrid(grid) {\n\treturn grid.withMutations(\n\t\t(gridWithMutations) => oldProcessGrid(gridWithMutations)\n\t);\n};\n\nexports = module.exports = ImmutablePuzzle;\n",
    "const hashIt = require(\"hash-it\");\nconst get    = require(\"lodash/get\");\nconst set    = require(\"lodash/set\");\nconst size   = require(\"lodash/size\");\n\n/**\n * Provides common functionality for {@link xpuz.ImmutablePuzzle} and {@link xpuz.Puzzle} classes.\n *\n * @mixin\n * @memberof xpuz\n *\n * @return {void}\n */\nfunction PuzzleMixin({ constructor, equalityTest, getter = get, setter = set, sizeOf = size }) {\n\tconst constructorName = constructor.name;\n\n\t/**\n\t * Finds which across and down clues a grid cell is a member of.\n\t *\n\t * @private\n\t *\n\t * @param {object} args - the function arguments\n\t * @param {Types.Grid|Types.ImmutableGrid} args.grid - the grid containing the cell\n\t * @param {number} args.width - the width of the grid (this is here just so that it doesn't have\n\t *\tto calculate it every time this is called)\n\t * @param {number} args.height - the height of the grid (this is here just so that it doesn't have\n\t *\tto calculate it every time this is called)\n\t * @param {number} args.rowIndex - the index of the row on which the cell occurs\n\t * @param {number} args.columnIndex - the index of the column on which the cell occurs\n\t *\n\t * @return {{across: ?number, down: ?number}} the clue numbers for the clues that contain this cell\n\t *\t(one or both of `across` and `down` keys may be populated)\n\t */\n\tfunction findContainingClues({ grid, width, height, rowIndex, columnIndex }) {\n\t\tconst containingClues = {};\n\n\t\tconst clueNumber = getter(grid, [rowIndex, columnIndex, \"clueNumber\"]);\n\n\t\tif (clueNumber !== undefined) {\n\t\t\t// This cell is a clue number cell--it defines either\n\t\t\t// its across clue number or its down clue number (or\n\t\t\t// both)\n\n\t\t\tif (\n\t\t\t\t// This is either at the left edge of the puzzle or\n\t\t\t\t// is bounded on the left by a block cell. This clue\n\t\t\t\t// number defines (at least) the cell's across clue number\n\t\t\t\t(columnIndex === 0 || getter(grid, [rowIndex, columnIndex - 1, \"isBlockCell\"])) &&\n\t\t\t\t// There is at least one fillable cell to the right\n\t\t\t\t(columnIndex < width - 1 && !getter(grid, [rowIndex, columnIndex + 1, \"isBlockCell\"]))\n\t\t\t) {\n\t\t\t\tcontainingClues.across = clueNumber;\n\t\t\t}\n\t\t\telse if (\n\t\t\t\t// There is at least one fillable cell below this\n\t\t\t\trowIndex < height - 1 && !getter(grid, [rowIndex + 1, columnIndex, \"isBlockCell\"])\n\t\t\t){\n\t\t\t\t// At least one cell exists to the left of this cell; this\n\t\t\t\t// is not an across clue number. It must be a down clue number.\n\t\t\t\tcontainingClues.down = clueNumber;\n\t\t\t}\n\t\t}\n\n\t\tif (!containingClues.across) {\n\t\t\t// Haven't found the across clue number yet.\n\t\t\t// Look to the left until we find a block cell or the edge of\n\t\t\t// the puzzle\n\t\t\tif (\n\t\t\t\t// At the left edge of the puzzle and there's a clue number\n\t\t\t\t(columnIndex === 0 && clueNumber !== undefined) &&\n\t\t\t\t// There is at least one fillable cell to the right\n\t\t\t\t!getter(grid, [rowIndex, columnIndex + 1, \"isBlockCell\"])\n\t\t\t) {\n\t\t\t\tcontainingClues.across = clueNumber;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfor (let i = columnIndex; i >= 0; i--) {\n\t\t\t\t\tif (getter(grid, [rowIndex, i, \"isBlockCell\"])) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (\n\t\t\t\t\t\t// There is at least one fillable cell to the right\n\t\t\t\t\t\ti < width - 1 && !getter(grid, [rowIndex, i + 1, \"isBlockCell\"])\n\t\t\t\t\t) {\n\t\t\t\t\t\tcontainingClues.across = getter(grid, [rowIndex, i, \"clueNumber\"]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!containingClues.down) {\n\t\t\t// Look at cells in other rows at the same index until we find a\n\t\t\t// cell with a clue number\n\t\t\tif (\n\t\t\t\t// At the top of the puzzle and there is a clue number\n\t\t\t\t(rowIndex === 0 && clueNumber !== undefined) &&\n\t\t\t\t// There is at least one fillable cell below it\n\t\t\t\t!getter(grid, [rowIndex + 1, columnIndex, \"isBlockCell\"])\n\t\t\t) {\n\t\t\t\tcontainingClues.down = clueNumber;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfor (let i = rowIndex; i >= 0; i--) {\n\t\t\t\t\tif (getter(grid, [i, columnIndex, \"isBlockCell\"])) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (\n\t\t\t\t\t\t// There is at least one fillable cell below it\n\t\t\t\t\t\ti < height - 1 && !getter(grid, [i + 1, columnIndex, \"isBlockCell\"])\n\t\t\t\t\t) {\n\t\t\t\t\t\tcontainingClues.down = getter(grid, [i, columnIndex, \"clueNumber\"]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn containingClues;\n\t}\n\n\t/**\n\t * Determines whether a cell in the grid is at the start of a down or across clue (or\n\t * both), and thus should be given a clue number.\n\t *\n\t * @private\n\t *\n\t * @param {object} args - the function arguments\n\t * @param {Types.Grid|Types.ImmutableGrid} args.grid - the grid containing the cell\n\t * @param {number} args.width - the width of the grid (this is here just so that it doesn't have\n\t *\tto calculate it every time this is called)\n\t * @param {number} args.height - the height of the grid (this is here just so that it doesn't have\n\t *\tto calculate it every time this is called)\n\t * @param {number} args.rowIndex - the index of the row on which the cell occurs\n\t * @param {number} args.columnIndex - the index of the column on which the cell occurs\n\t *\n\t * @return {boolean} whether or not the specified cell should be given a clue number\n\t */\n\tfunction hasClueNumber({ grid, width, height, rowIndex, columnIndex }) {\n\t\tif (getter(grid, [rowIndex, columnIndex, \"isBlockCell\"])) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (\n\t\t\t(columnIndex === 0 || getter(grid, [rowIndex, columnIndex - 1, \"isBlockCell\"])) &&\n\t\t\t(columnIndex + 1 < width && !getter(grid, [rowIndex, columnIndex + 1, \"isBlockCell\"]))\n\t\t) {\n\t\t\t// This cell is adjacent to the puzzle edge or a block cell on the left,\n\t\t\t// and has at least one input cell to its right--this cell starts an across clue\n\t\t\treturn true;\n\t\t}\n\n\t\tif (\n\t\t\t(rowIndex === 0 || getter(grid, [rowIndex - 1, columnIndex, \"isBlockCell\"])) &&\n\t\t\t(rowIndex + 1 < height && !getter(grid, [rowIndex + 1, columnIndex, \"isBlockCell\"]))\n\t\t) {\n\t\t\t// This cell is adjacent to the puzzle edge or a block cell on the top,\n\t\t\t// and has at least one input cell below it--this cell starts a down clue\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tObject.defineProperties(\n\t\tconstructor.prototype,\n\t\t{\n\t\t\t/**\n\t\t\t * Determines whether this object is equivalent to another object\n\t\t\t *\n\t\t\t * @method\n\t\t\t * @instance\n\t\t\t * @memberof xpuz.PuzzleMixin\n\t\t\t *\n\t\t\t * @param {*} other - the object to compare against\n\t\t\t *\n\t\t\t * @return {boolean} whether or not the other object is equal to this\n\t\t\t */\n\t\t\tequals: {\n\t\t\t\twritable: true,\n\t\t\t\tconfigurable: true,\n\t\t\t\tvalue: function equals(other) {\n\t\t\t\t\tif (!(other instanceof constructor)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn equalityTest(this.grid, other.grid) &&\n\t\t\t\t\t\tequalityTest(this.clues, other.clues) &&\n\t\t\t\t\t\tequalityTest(this.userSolution, other.userSolution) &&\n\t\t\t\t\t\tequalityTest(this.info, other.info) &&\n\t\t\t\t\t\tequalityTest(this.extensions, other.extensions);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns a hash code integer for this object.\n\t\t\t *\n\t\t\t * @method\n\t\t\t * @instance\n\t\t\t * @memberof xpuz.PuzzleMixin\n\t\t\t *\n\t\t\t * @return {number} the object's hash code\n\t\t\t */\n\t\t\thashCode: {\n\t\t\t\twritable: true,\n\t\t\t\tconfigurable: true,\n\t\t\t\tvalue: function hashCode() {\n\t\t\t\t\treturn hashIt(this);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns a string representation of this object.\n\t\t\t *\n\t\t\t * @method\n\t\t\t * @instance\n\t\t\t * @memberof xpuz.PuzzleMixin\n\t\t\t *\n\t\t\t * @return {string} string representation of this object\n\t\t\t */\n\t\t\ttoString: {\n\t\t\t\twritable: true,\n\t\t\t\tconfigurable: true,\n\t\t\t\tvalue: function toString() {\n\t\t\t\t\treturn constructorName;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns a string representation of this object.\n\t\t\t *\n\t\t\t * @member {string} @@toStringTag\n\t\t\t * @instance\n\t\t\t * @readonly\n\t\t\t * @memberof xpuz.PuzzleMixin\n\t\t\t *\n\t\t\t * @return {string} string representation of this object\n\t\t\t */\n\t\t\t[Symbol.toStringTag]: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tget() {\n\t\t\t\t\treturn constructorName;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Updates the cells of the grid to have accurate clue numbering and `containingClues` properties.\n\t\t\t *\n\t\t\t * @method\n\t\t\t * @instance\n\t\t\t * @memberof xpuz.PuzzleMixin\n\t\t\t *\n\t\t\t * @param {Types.Grid|Types.ImmutableGrid} [grid=this.grid] - the grid to update and set as the puzzle's grid\n\t\t\t *\n\t\t\t * @return {Puzzle|ImmutablePuzzle} the puzzle, with the updated cell information (return type is whatever\n\t\t\t *\ttype `this` is)\n\t\t\t */\n\t\t\tupdateGrid: {\n\t\t\t\twritable: true,\n\t\t\t\tconfigurable: true,\n\t\t\t\tvalue: function updateGrid(grid = this.grid) {\n\t\t\t\t\treturn setter(this, [\"grid\"], constructor.processGrid(grid));\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Sets the value of the specified cell and ensures that all cell information is kept up-to-date.\n\t\t\t *\n\t\t\t * @method\n\t\t\t * @instance\n\t\t\t * @memberof xpuz.PuzzleMixin\n\t\t\t *\n\t\t\t * @param {number} columnIndex - the column index of the cell to set\n\t\t\t * @param {number} rowIndex - the row index of the cell to set\n\t\t\t * @param {Types.GridCell|external:Immutable.Map<Types.GridCell>} - the cell information to set (this\n\t\t\t *\treplaces the existing cell information)\n\t\t\t *\n\t\t\t * @return {Puzzle|ImmutablePuzzle} the puzzle, with the updated cell information (return type is whatever\n\t\t\t *\ttype `this` is)\n\t\t\t */\n\t\t\tupdateCell: {\n\t\t\t\twritable: true,\n\t\t\t\tconfigurable: true,\n\t\t\t\tvalue: function updateCell(columnIndex, rowIndex, cell) {\n\t\t\t\t\tconst grid = setter(this.grid, [rowIndex, columnIndex], cell);\n\n\t\t\t\t\treturn this.updateGrid(grid);\n\t\t\t\t}\n\t\t\t},\n\t\t}\n\t);\n\n\tObject.defineProperties(\n\t\tconstructor,\n\t\t{\n\t\t\t/**\n\t\t\t * Updates the specified grid with the correct cell information (clue numbers, etc.)\n\t\t\t *\n\t\t\t * @function\n\t\t\t * @memberof xpuz.PuzzleMixin\n\t\t\t *\n\t\t\t * @param {Types.Grid|Types.ImmutableGrid} grid - the\n\t\t\t *\tgrid to update\n\t\t\t *\n\t\t\t * @return {Puzzle|ImmutablePuzzle} the puzzle, with the updated cell information (return type is whatever\n\t\t\t *\ttype `grid` is)\n\t\t\t */\n\t\t\tprocessGrid: {\n\t\t\t\twritable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: function processGrid(grid) {\n\t\t\t\t\tconst height = sizeOf(grid);\n\t\t\t\t\tconst width = sizeOf(getter(grid, [0]));\n\t\t\t\t\tlet clueNumber = 0;\n\n\t\t\t\t\tfor (let rowIndex = 0; rowIndex < height; rowIndex++) {\n\t\t\t\t\t\tfor (let columnIndex = 0; columnIndex < width; columnIndex++) {\n\t\t\t\t\t\t\tif (getter(grid, [rowIndex, columnIndex, \"isBlockCell\"])) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst args = {\n\t\t\t\t\t\t\t\tgrid,\n\t\t\t\t\t\t\t\twidth,\n\t\t\t\t\t\t\t\theight,\n\t\t\t\t\t\t\t\trowIndex,\n\t\t\t\t\t\t\t\tcolumnIndex,\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tconst cellClueNumber = hasClueNumber(args) ?\n\t\t\t\t\t\t\t\t++clueNumber :\n\t\t\t\t\t\t\t\tundefined;\n\n\t\t\t\t\t\t\tsetter(grid, [rowIndex, columnIndex, \"clueNumber\"], cellClueNumber);\n\n\t\t\t\t\t\t\tsetter(grid, [rowIndex, columnIndex, \"containingClues\"], findContainingClues(args));\n\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn grid;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t);\n}\n\nexports = module.exports = PuzzleMixin;\n",
    "const reduce          = require(\"lodash/reduce\");\nconst isEqual         = require(\"lodash/isEqual\");\nconst PuzzleMixin     = require(\"./puzzle-mixin\");\n\n/**\n * Info object\n *\n * @typedef PuzzleInfo\n *\n * @memberof xpuz.Puzzle\n *\n * @prop {?string} title - the title of the puzzle\n * @prop {?string} author - the author of the puzzle\n * @prop {?string} publisher - the publisher of the puzzle\n * @prop {?string} copyright - the copyright of the puzzle\n * @prop {?string} intro - the introductory text of the puzzle\n * @prop {?*} difficulty - the difficulty level of the puzzle\n */\n\n/**\n * Represents a puzzle object\n *\n * @memberof xpuz\n * @mixes xpuz.PuzzleMixin\n */\nclass Puzzle {\n\t/**\n\t * @param {object} args - the constructor args\n\t * @param {Types.Grid} args.grid - a two-dimensional array representing the puzzle grid\n\t * @param {{across: object<number, string>, down: object<number, string>}} args.clues - a list of clues\n\t *\tfor across and down, with each collection having the key as the clue number and the value as the clue\n\t *\ttext (e.g. `{across: { 3: \"some clue\" }}`)\n\t * @param {Array<Array<?string>>} [args.userSolution] - the currently filled in guesses of the user stored with this\n\t *\tpuzzle instance. Two dimensional array with the same dimensions as `grid`, where each cell is either a string\n\t *\tor `null` (for block cells)\n\t * @param {xpuz.Puzzle.PuzzleInfo} [args.info] - information about the puzzle\n\t * @param {object} [args.extensions] - extra, possibly implementation-specific information about the puzzle, such as timer\n\t *\tinformation\n\t */\n\tconstructor({\n\t\tgrid,\n\t\tclues,\n\t\tuserSolution,\n\t\tinfo,\n\t\textensions\n\t}) {\n\t\t/**\n\t\t * The definition of the puzzle grid. It is represented as an array of rows, so\n\t\t *\t`grid[0]` is the first row of the puzzle.\n\t\t *\n\t\t * @type Array<Array<Types.GridCell>>\n\t\t * @instance\n\t\t */\n\t\tthis.grid = Puzzle.processGrid(grid || []); // processGrid() is defined in PuzzleMixin\n\t\t\n\t\t/**\n\t\t * Listing of clues for the puzzle\n\t\t *\n\t\t * @type object\n\t\t * @instance\n\t\t *\n\t\t * @property {object} across - an object mapping clue numbers to clue texts for across clues\n\t\t * @property {object} down - an object mapping clue numbers to clue texts for down clues\n\t\t */\n\t\tthis.clues = clues || {\n\t\t\tacross: {},\n\t\t\tdown: {},\n\t\t};\n\n\t\tinfo = info || {};\n\n\t\t/**\n\t\t * An object of various puzzle information, such as author, title, copyright, etc.\n\t\t *\n\t\t * @type object\n\t\t * @instance\n\t\t *\n\t\t * @property {string} [title] - the title of the puzzle\n\t\t * @property {string} [author] - the author of the puzzle\n\t\t * @property {string} [publisher] - the publisher of the puzzle\n\t\t * @property {string} [copyright] - the copyright text of the puzzle\n\t\t * @property {*} [difficulty] - the difficulty level of the puzzle\n\t\t * @property {string} [intro] - the introductory text of the puzzle\n\t\t */\n\t\tthis.info = {\n\t\t\ttitle: info.title || \"\",\n\t\t\tauthor: info.author || \"\",\n\t\t\tcopyright: info.copyright || \"\",\n\t\t\tpublisher: info.publisher || \"\",\n\t\t\tdifficulty: info.difficulty || \"\",\n\t\t\tintro: info.intro || \"\",\n\t\t};\n\n\t\t/**\n\t\t * A structure representing the current solution as the user has filled it out.\n\t\t *\tThe structure is similar to {@link xpuz.Puzzle#grid|grid}, but\n\t\t *\teach item is a string containing the user's current answer--an empty string\n\t\t *\tif the corresponding grid cell is not filled in, a non-empty string if it's\n\t\t *\tfilled in.\n\t\t *\n\t\t * @type Array<string[]>\n\t\t * @instance\n\t\t */\n\t\tthis.userSolution = userSolution || grid.map(\n\t\t\t(row) => row.map(\n\t\t\t\t(cell) => cell.isBlockCell ? null : \"\"\n\t\t\t)\n\t\t);\n\n\t\t/**\n\t\t * A collection of extra, possibly implementation-dependent data about the puzzle,\n\t\t * such as timer information.\n\t\t *\n\t\t * @type object\n\t\t * @instance\n\t\t */\n\t\tthis.extensions = extensions || {};\n\t}\n\n\t/**\n\t * Returns this puzzle as a plain Javascript object, suitable for serializing to JSON.\n\t *\n\t * @method\n\t *\n\t * @returns {object} object representation of this puzzle object\n\t */\n\ttoJSON = () => {\n\t\treturn {\n\t\t\tgrid: this.grid,\n\t\t\tclues: this.clues,\n\t\t\tuserSolution: this.userSolution,\n\t\t\tinfo: this.info,\n\t\t\textensions: this.extensions,\n\t\t};\n\t}\n\n\t/**\n\t * Returns a deep copy of this puzzle.\n\t *\n\t * @method\n\t *\n\t * @returns {xpuz.Puzzle} cloned Puzzle\n\t */\n\tclone = () => {\n\t\treturn new Puzzle(\n\t\t\t{\n\t\t\t\tgrid: this.grid.map(\n\t\t\t\t\t(row) => row.map(\n\t\t\t\t\t\t(cell) => Object.assign({}, cell) // Clone (shallow) cell object\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t\tclues: {\n\t\t\t\t\tacross: reduce(\n\t\t\t\t\t\tthis.clues.across,\n\t\t\t\t\t\t(cloned, clue, clueNumber) => {\n\t\t\t\t\t\t\tcloned[clueNumber] = clue;\n\t\t\n\t\t\t\t\t\t\treturn cloned;\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{}\n\t\t\t\t\t),\n\t\t\t\t\tdown: reduce(\n\t\t\t\t\t\tthis.clues.down,\n\t\t\t\t\t\t(cloned, clue, clueNumber) => {\n\t\t\t\t\t\t\tcloned[clueNumber] = clue;\n\t\t\n\t\t\t\t\t\t\treturn cloned;\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{}\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t\tuserSolution: this.userSolution.map(\n\t\t\t\t\t(row) => row.map(\n\t\t\t\t\t\t(cell) => cell // Values in userSolution are just strings\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t\tinfo: Object.assign({}, this.info),\n\t\t\t\textensions: JSON.parse(JSON.stringify(this.extensions)), // Deep clone\n\t\t\t}\n\t\t);\n\t}\n}\n\nPuzzleMixin({\n\tconstructor: Puzzle,\n\tequalityTest: isEqual,\n});\n\nexports = module.exports = Puzzle;\n",
    "/**\n * IPUZ file parser.\n *\n * @module xpuz/parsers/ipuz\n */\n\nconst Promise  = require(\"bluebird\");\nconst fs       = require(\"fs\");\n// fs is stubbed out for browser builds\nconst readFile = fs.readFile ? Promise.promisify(fs.readFile) : () => {};\nconst max      = require(\"lodash/max\");\nconst get      = require(\"lodash/get\");\nconst isObject = require(\"lodash/isObject\");\nconst isString = require(\"lodash/isString\");\nconst reduce   = require(\"lodash/reduce\");\nconst Puzzle   = require(\"../lib/puzzle\");\n\nconst BLOCK_VALUE = \"#\";\n\nfunction _checkDimensions(puzzle) {\n\tconst errors = [];\n\n\tconst maxCellWidth = max(\n\t\tpuzzle.puzzle,\n\t\t\"length\"\n\t).length;\n\n\tconst numRows = puzzle.puzzle.length;\n\n\tif (maxCellWidth > puzzle.dimensions.width) {\n\t\terrors.push(`Too many puzzle cells (${maxCellWidth}) for puzzle width (${puzzle.dimensions.width})`);\n\t}\n\n\tif (numRows > puzzle.dimensions.height) {\n\t\terrors.push(`Too many puzzle cells (${numRows}) for puzzle height (${puzzle.dimensions.height})`);\n\t}\n\n\treturn errors;\n}\n\nfunction _getClueNumber(cell) {\n\treturn isObject(cell) ?\n\t\tcell.cell :\n\t\tcell;\n}\n\nfunction _addClue(obj, clue) {\n\tobj[clue[0]] = clue[1];\n\n\treturn obj;\n}\n\nfunction _convertPuzzle(ipuz) {\n\tconst puzzle = new Puzzle({\n\t\tinfo: {\n\t\t\ttitle: ipuz.title,\n\t\t\tauthor: ipuz.author,\n\t\t\tcopyright: ipuz.copyright,\n\t\t\tpublisher: ipuz.publisher,\n\t\t\tdifficulty: ipuz.difficulty,\n\t\t\tintro: ipuz.intro,\n\t\t},\n\t\tgrid: ipuz.puzzle.map(\n\t\t\t(row) => row.map(\n\t\t\t\t(cell) => {\n\t\t\t\t\tif (cell === BLOCK_VALUE) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tisBlockCell: true\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tclueNumber: _getClueNumber(cell),\n\t\t\t\t\t\tbackgroundShape: get(cell, \"style.shapebg\")\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t)\n\t\t),\n\t\tclues: {\n\t\t\tacross: reduce(ipuz.clues.across,\n\t\t\t\t_addClue,\n\t\t\t\t{}\n\t\t\t),\n\t\t\tdown: reduce(ipuz.clues.down,\n\t\t\t\t_addClue,\n\t\t\t\t{}\n\t\t\t),\n\t\t}\n\t});\n\n\treturn puzzle;\n}\n\nfunction _validatePuzzle(puzzle) {\n\tconst errors = [];\n\n\tif (!puzzle.dimensions) {\n\t\terrors.push(\"Puzzle is missing 'dimensions' key\");\n\t}\n\n\tif (puzzle.puzzle) {\n\t\terrors.push(..._checkDimensions(puzzle));\n\t}\n\telse {\n\t\terrors.push(\"Puzzle is missing 'puzzle' key\");\n\t}\n\n\treturn errors.length === 0 ? undefined : errors;\n}\n\n/**\n * Parser class for IPUZ-formatted puzzles\n */\nclass IPUZParser {\n\t/**\n\t * Parses a {@link module:xpuz/puzzle~Puzzle|Puzzle} from the input.\n\t *\n\t * @param {string|object} puzzle - the source to parse the puzzle from; if a string,\n\t *\tit is assumed to be a file path, if an object, it defines a Puzzle object.\n\t *\n\t * @returns {module:xpuz/puzzle~Puzzle} the parsed {@link module:xpuz/puzzle~Puzzle|Puzzle} object\n\t */\n\tparse(puzzle) {\n\t\tlet promise;\n\n\t\tif (isString(puzzle)) {\n\t\t\t// path to puzzle\n\t\t\tpromise = readFile(puzzle).then(\n\t\t\t\t(fileContent) => JSON.parse(fileContent.toString())\n\t\t\t).catch(\n\t\t\t\t(ex) => {\n\t\t\t\t\tthrow new Error(`Unable to read IPUZ puzzle from file ${puzzle}: ${ex.message}`);\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t\telse if (isObject(puzzle)) {\n\t\t\tpromise = Promise.resolve(puzzle);\n\t\t}\n\t\telse {\n\t\t\treturn Promise.reject(new Error(\"parse() expects either a path string or an object\"));\n\t\t}\n\n\t\treturn promise.then(\n\t\t\t(puzzle) => {\n\t\t\t\tconst errors = _validatePuzzle(puzzle);\n\n\t\t\t\tif (errors !== undefined) {\n\t\t\t\t\tthrow new Error(`Invalid puzzle:\\n\\t${errors.join(\"\\n\\t\")}`);\n\t\t\t\t}\n\n\t\t\t\treturn _convertPuzzle(puzzle);\n\t\t\t}\n\t\t);\n\t}\n}\n\nexports = module.exports = IPUZParser;\n",
    "/**\n * JPZ Parser\n *\n * @description Parses .jpz formatted puzzles (NOT CURRENTLY IMPLEMENTED)\n * @module xpuz/parsers/jpz\n */\n\nconst isString = require(\"lodash/isString\");\nconst isObject = require(\"lodash/isObject\");\nconst Promise  = require(\"bluebird\");\nconst fs       = require(\"fs\");\n// fs is stubbed out for browser builds\nconst readFile = fs.readFile ? Promise.promisify(fs.readFile) : () => {};\nconst Puzzle   = require(\"../lib/puzzle\");\n\n/**\n * JPZ parser class\n */\nclass JPZParser {\n\t/**\n\t * Parses a {@link module:xpuz/puzzle~Puzzle} from the input\n\t *\n\t * @param {string|object} puzzle - the source to parse the puzzle from; if a string,\n\t *\tit is assumed to be a file path, if an object, it defines a Puzzle object\n\t *\n\t * @return {external:Promise<module:xpuz/puzzle~Puzzle>} a promise that resolves with\n\t *\tthe parsed puzzle object\n\t */\n\tparse(puzzle) {\n\t\tif (isString(puzzle)) {\n\t\t\t// path to puzzle\n\t\t\treturn readFile(puzzle).then(\n\t\t\t\t(fileContent) => new Puzzle(fileContent.toString())\n\t\t\t).catch(\n\t\t\t\t(ex) => {\n\t\t\t\t\tthrow new Error(\"Unable to read JPZ puzzle from file \" +\n\t\t\t\t\t\tpuzzle + \": \" + ex.message);\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t\telse if (isObject(puzzle)) {\n\t\t\treturn Promise.resolve(new Puzzle(puzzle));\n\t\t}\n\t\telse {\n\t\t\treturn Promise.reject(new Error(\"parse() expects either a path string or an object\"));\n\t\t}\n\t}\n}\n\nexports = module.exports = JPZParser;\n",
    "/**\n * PUZ file parser.\n *\n * @module xpuz/parsers/puz\n * @see {@link module:xpuz/puzzle|Puzzle}\n */\n\nconst map             = require(\"lodash/map\");\nconst get             = require(\"lodash/get\");\nconst range           = require(\"lodash/range\");\nconst reverse         = require(\"lodash/reverse\");\nconst zip             = require(\"lodash/zip\");\nconst each            = require(\"lodash/each\");\nconst reduce          = require(\"lodash/reduce\");\nconst flatten         = require(\"lodash/flatten\");\nconst padStart        = require(\"lodash/padStart\");\nconst chunk           = require(\"lodash/chunk\");\nconst findKey         = require(\"lodash/findKey\");\nconst compact         = require(\"lodash/compact\");\nconst size            = require(\"lodash/size\");\nconst iconv           = require(\"iconv-lite\");\nconst PUZReader       = require(\"./puz/puz-reader\");\nconst Puzzle          = require(\"../lib/puzzle\");\nconst ImmutablePuzzle = require(\"../lib/immutable-puzzle\");\n\n\nconst BLOCK_CELL_VALUE = \".\";\n\nconst BLOCK_CELL_VALUE_REGEX = /\\./g;\n\nconst EXTENSION_HEADER_LENGTH = 8;\n\nconst HEADER_CHECKSUM_BYTE_LENGTH = 8;\n\nconst MAGIC_CHECKSUM_BYTE_LENGTH = 8;\n\nconst UNKNOWN1_BYTE_LENGTH = 2;\n\nconst UNKNOWN2_BYTE_LENGTH = 12;\n\nconst CHECKSUM_BUFFER_LENGTH = 2;\n\nconst NUMBER_OF_CLUES_BUFFER_LENGTH = 2;\n\nconst PUZZLE_TYPE_BUFFER_LENGTH = 2;\n\nconst SOLUTION_STATE_BUFFER_LENGTH = 2;\n\nconst HEADER_BUFFER_LENGTH = 52;\n\nconst EXTENSION_LENGTH_BUFFER_LENGTH = 2;\n\nconst EXTENSION_NAME_LENGTH = 4;\n\nconst PUZZLE_KEY_LENGTH = 4;\n\nconst RTBL_KEY_PADDING_WIDTH = 2;\n\nconst PUZZLE_TYPE = {\n\tNormal: 0x0001,\n\tDiagramless: 0x0401\n};\n\nconst SOLUTION_STATE = {\n\t// solution is available in plaintext\n\tUnlocked: 0x0000,\n\t// solution is locked (scrambled) with a key\n\tLocked: 0x0004\n};\n\nconst CELL_STATES = {\n\tPreviouslyIncorrect: 0x10,\n\tCurrentlyIncorrect: 0x20,\n\tAnswerGiven: 0x40,\n\tCircled: 0x80\n};\n\nconst ATOZ = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\nconst MINIMUM_KEY_VALUE = 1000;\n\nconst MAXIMUM_KEY_VALUE = 9999;\n\nfunction _doChecksum(buffer, cksum) {\n\tfor (let i = 0; i < buffer.length; i++) {\n\t\t// right-shift one with wrap-around\n\t\tconst lowbit = cksum & 0x0001;\n\n\t\tcksum = cksum >> 1;\n\n\t\tif (lowbit) {\n\t\t\t// eslint-disable-next-line no-magic-numbers\n\t\t\tcksum = cksum | 0x8000;\n\t\t}\n\n\t\t// then add in the data and clear any carried bit past 16\n\t\t// eslint-disable-next-line no-magic-numbers\n\t\tcksum = (cksum + buffer.readUInt8(i)) & 0xFFFF;\n\t}\n\n\treturn cksum;\n}\n\nfunction _readHeader(reader, options) {\n\tconst data = {};\n\n\tdata.globalChecksum = reader._readUInt16();\n\n\treader._seek(\"ACROSS&DOWN\\0\".length, { current: true });\n\n\tdata.headerChecksum = reader._readUInt16();\n\n\tdata.magicChecksum = reader._readValues(MAGIC_CHECKSUM_BYTE_LENGTH);\n\n\tdata.version = reader._readString();\n\n\tdata.unknown1 = reader._readValues(UNKNOWN1_BYTE_LENGTH);\n\n\tdata.scrambledChecksum = reader._readUInt16();\n\n\tdata.unknown2 = reader._readValues(UNKNOWN2_BYTE_LENGTH);\n\n\tdata.width = reader._readUInt8();\n\n\tdata.height = reader._readUInt8();\n\n\tdata.numberOfClues = reader._readUInt16();\n\n\tdata.puzzleType = reader._readUInt16();\n\n\tdata.solutionState = reader._readUInt16();\n\n\tif (data.solutionState === SOLUTION_STATE.Locked && !options.solutionKey) {\n\t\tthrow new Error(\"Puzzle solution is locked and no solutionKey option was provided\");\n\t}\n\n\treturn data;\n}\n\nfunction _processExtension(extension) {\n\tif (extension.name === \"GRBS\") {\n\t\textension.board = map(\n\t\t\textension.data,\n\t\t\t(b) => {\n\t\t\t\tif (b === 0) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\treturn b - 1;\n\t\t\t}\n\t\t);\n\t}\n\n\tif (extension.name === \"RTBL\") {\n\t\textension.rebus_solutions = reduce(\n\t\t\ticonv.decode(extension.data, PUZReader.ENCODING).split(\";\"),\n\t\t\t(solutions, solutionPair) => {\n\t\t\t\tconst pair = solutionPair.split(\":\");\n\n\t\t\t\tpair[0] = parseInt(pair[0], 10);\n\n\t\t\t\tsolutions[pair[0]] = pair[1];\n\n\t\t\t\treturn solutions;\n\t\t\t},\n\t\t\t{}\n\t\t);\n\t}\n\n\tif (extension.name === \"LTIM\") {\n\t\tconst timings = iconv.decode(extension.data, PUZReader.ENCODING).split(\",\");\n\n\t\textension.timing = {\n\t\t\telapsed: parseInt(timings[0], 10),\n\t\t\trunning: timings[1] === \"0\"\n\t\t};\n\t}\n\n\tif (extension.name === \"GEXT\") {\n\t\textension.cell_states = map(\n\t\t\textension.data,\n\t\t\t(b) => {\n\t\t\t\treturn {\n\t\t\t\t\tPreviouslyIncorrect: !!(b & CELL_STATES.PreviouslyIncorrect),\n\t\t\t\t\tCurrentlyIncorrect: !!(b & CELL_STATES.CurrentlyIncorrect),\n\t\t\t\t\tAnswerGiven: !!(b & CELL_STATES.AnswerGiven),\n\t\t\t\t\tCircled: !!(b & CELL_STATES.Circled)\n\t\t\t\t};\n\t\t\t}\n\t\t);\n\t}\n\n\tif (extension.name === \"RUSR\") {\n\t\textension.user_rebus_entries = map(\n\t\t\ticonv.decode(extension.data, PUZReader.ENCODING).split(\"\\0\"),\n\t\t\t(entry) => entry === \"\" ? null : entry\n\t\t);\n\t}\n\n\treturn extension;\n}\n\nfunction _readExtension(reader) {\n\tconst extension = {};\n\n\textension.name = reader._readString(EXTENSION_NAME_LENGTH);\n\n\tconst length = reader._readUInt16();\n\n\textension.checksum = reader._readUInt16();\n\n\t// Include null byte at end\n\textension.data = reader._readValues(length + 1);\n\t// Remove null byte at the end\n\textension.data = extension.data.slice(0, -1);\n\n\treturn _processExtension(extension);\n}\n\nfunction _parseEnd(reader, data) {\n\tconst remainingLength = reader.size() - reader.tell();\n\n\tif (remainingLength >= EXTENSION_HEADER_LENGTH) {\n\t\tconst extension = _readExtension(reader);\n\n\t\tdata.extensions = data.extensions || {};\n\t\tdata.extensions[extension.name] = extension;\n\n\t\tdelete extension.name;\n\n\t\t_parseEnd(reader, data);\n\t}\n}\n\nfunction _parseExtensions(reader, puzzleData) {\n\tconst data = {};\n\n\t_parseEnd(reader, data);\n\n\tif (get(data, \"extensions.GRBS\")) {\n\t\teach(\n\t\t\tflatten(puzzleData.grid),\n\t\t\t(cell, index) => {\n\t\t\t\tconst c = cell;\n\n\t\t\t\tif (data.extensions.GRBS.board[index] === null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst rebusSolution = data.extensions.RTBL.rebus_solutions[\n\t\t\t\t\tdata.extensions.GRBS.board[index]\n\t\t\t\t];\n\n\t\t\t\tc.solution = rebusSolution;\n\t\t\t}\n\t\t);\n\t}\n\n\tif (get(data, \"extensions.RUSR\")) {\n\t\tdata.extensions.RUSR.user_rebus_entries.forEach(\n\t\t\t(rusr, index) => {\n\t\t\t\tif (rusr !== null) {\n\t\t\t\t\tconst y = Math.floor(index / puzzleData.header.width);\n\t\t\t\t\tconst x = index % puzzleData.header.width;\n\n\t\t\t\t\tpuzzleData.solution[y][x] = rusr;\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t}\n\n\tpuzzleData._extensions = data.extensions;\n\n\tpuzzleData.timing = get(data, \"extensions.LTIM.timing\");\n}\n\nfunction _readClues(reader, numberOfClues) {\n\tconst clues = [];\n\n\tfor (let i = 0; i < numberOfClues; i++) {\n\t\tclues.push(reader._readString());\n\t}\n\n\treturn clues;\n}\n\nfunction _generateGridAndClues(answers, clueList) {\n\tfunction _isBlockCell(x, y) {\n\t\treturn answers[y][x] === BLOCK_CELL_VALUE;\n\t}\n\n\tconst clues = {\n\t\tacross: {},\n\t\tdown: {}\n\t};\n\n\tconst grid = [];\n\n\tconst width = answers[0].length, height = answers.length;\n\n\tlet clueCount = 0;\n\n\tlet clueListIndex = 0;\n\n\tfor (let y = 0; y < height; y++) {\n\t\tconst row = [];\n\n\t\tfor (let x = 0; x < width; x++) {\n\t\t\tconst cell = {};\n\n\t\t\tif (_isBlockCell(x, y)) {\n\t\t\t\tcell.isBlockCell = true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcell.solution = answers[y][x];\n\n\t\t\t\tlet down = false, across = false;\n\n\t\t\t\tif (\n\t\t\t\t\t(\n\t\t\t\t\t\tx === 0 ||\n\t\t\t\t\t\t_isBlockCell(x - 1, y)\n\t\t\t\t\t) && (\n\t\t\t\t\t\tx + 1 < width &&\n\t\t\t\t\t\t!_isBlockCell(x + 1, y)\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tacross = true;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\t(\n\t\t\t\t\t\ty === 0 ||\n\t\t\t\t\t\t_isBlockCell(x, y - 1)\n\t\t\t\t\t) && (\n\t\t\t\t\t\ty + 1 < height &&\n\t\t\t\t\t\t!_isBlockCell(x, y + 1)\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tdown = true;\n\t\t\t\t}\n\n\t\t\t\tif (across || down) {\n\t\t\t\t\tcell.clueNumber = ++clueCount;\n\t\t\t\t}\n\n\t\t\t\tif (across) {\n\t\t\t\t\tclues.across[clueCount] = clueList[clueListIndex++];\n\t\t\t\t}\n\n\t\t\t\tif (down) {\n\t\t\t\t\tclues.down[clueCount] = clueList[clueListIndex++];\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\n\t\t\trow.push(cell);\n\t\t}\n\n\t\tgrid.push(row);\n\t}\n\n\treturn {\n\t\tgrid,\n\t\tclues,\n\t};\n}\n\nfunction _pluckSolutions(grid) {\n\treturn grid.map(\n\t\t(row) => row.map(\n\t\t\t(cell) => {\n\t\t\t\tif (cell.isBlockCell) {\n\t\t\t\t\treturn BLOCK_CELL_VALUE;\n\t\t\t\t}\n\n\t\t\t\tif (cell.solution === null) {\n\t\t\t\t\treturn \" \";\n\t\t\t\t}\n\n\t\t\t\treturn cell.solution;\n\t\t\t}\n\t\t)\n\t);\n}\n\nfunction _flattenSolution(solution) {\n\treturn flatten(solution).map(\n\t\t(entry) => {\n\t\t\tif (entry === null) {\n\t\t\t\treturn BLOCK_CELL_VALUE;\n\t\t\t}\n\n\t\t\tif (entry === \"\") {\n\t\t\t\treturn \"-\";\n\t\t\t}\n\n\t\t\treturn entry[0];\n\t\t}\n\t).join(\"\");\n}\n\nfunction _unflattenSolution(solution, width) {\n\treturn chunk(\n\t\tsolution.split(\"\"),\n\t\twidth\n\t).map(\n\t\t(row) => row.map(\n\t\t\t(cell) => cell === \"-\" ? \"\" : cell\n\t\t)\n\t);\n}\n\nfunction _textChecksum(puzzleData, checksum) {\n\tif (puzzleData.title) {\n\t\tchecksum = _doChecksum(iconv.encode(puzzleData.title + \"\\0\", PUZReader.ENCODING), checksum);\n\t}\n\n\tif (puzzleData.author) {\n\t\tchecksum = _doChecksum(iconv.encode(puzzleData.author + \"\\0\", PUZReader.ENCODING), checksum);\n\t}\n\n\n\tif (puzzleData.copyright) {\n\t\tchecksum = _doChecksum(iconv.encode(puzzleData.copyright + \"\\0\", PUZReader.ENCODING), checksum);\n\t}\n\n\tpuzzleData.clueList.forEach(\n\t\t(clue) => {\n\t\t\tif (clue) {\n\t\t\t\tchecksum = _doChecksum(iconv.encode(clue, PUZReader.ENCODING), checksum);\n\t\t\t}\n\t\t}\n\t);\n\n\tif (puzzleData.notes) {\n\t\tchecksum = _doChecksum(iconv.encode(puzzleData.notes + \"\\0\", PUZReader.ENCODING), checksum);\n\t}\n\n\treturn checksum;\n}\n\nfunction _headerChecksum(puzzleData, checksum) {\n\tif(checksum === undefined) {\n\t\tchecksum = 0;\n\t}\n\n\tconst buffer = new Buffer(HEADER_CHECKSUM_BYTE_LENGTH);\n\n\tbuffer.writeUInt8(puzzleData.header.width, 0);\n\tbuffer.writeUInt8(puzzleData.header.height, 1);\n\t// These \"magic numbers\" are the successive byte offsets to write at\n\t/* eslint-disable no-magic-numbers */\n\tbuffer.writeUInt16LE(puzzleData.header.numberOfClues, 2);\n\tbuffer.writeUInt16LE(puzzleData.header.puzzleType, 4);\n\tbuffer.writeUInt16LE(puzzleData.header.solutionState, 6);\n\t/* eslint-enable no-magic-numbers */\n\n\treturn _doChecksum(buffer, checksum);\n}\n\nfunction _globalChecksum(puzzleData, headerChecksum) {\n\tlet checksum = headerChecksum === undefined ? _headerChecksum(puzzleData) : headerChecksum;\n\n\tlet buffer = iconv.encode(puzzleData.answer, PUZReader.ENCODING);\n\n\tchecksum = _doChecksum(buffer, checksum);\n\n\tbuffer = iconv.encode(puzzleData.solution, PUZReader.ENCODING);\n\n\tchecksum = _doChecksum(buffer, checksum);\n\n\tchecksum = _textChecksum(puzzleData, checksum);\n\n\treturn checksum;\n}\n\nfunction _magicChecksum(puzzleData) {\n\tconst headerChecksum = _headerChecksum(puzzleData);\n\tconst answerChecksum = _doChecksum(iconv.encode(puzzleData.answer, PUZReader.ENCODING));\n\tconst solutionChecksum = _doChecksum(iconv.encode(puzzleData.solution, PUZReader.ENCODING));\n\tconst textChecksum = _textChecksum(puzzleData);\n\n\tconst MAGIC_CHECKSUM_STRING = \"ICHEATED\";\n\n\tconst magicChecksum = new Buffer([\n\t\t/* eslint-disable no-magic-numbers */\n\t\tMAGIC_CHECKSUM_STRING.charCodeAt(0) ^ (headerChecksum & 0xFF),\n\t\tMAGIC_CHECKSUM_STRING.charCodeAt(1) ^ (answerChecksum & 0xFF),\n\t\tMAGIC_CHECKSUM_STRING.charCodeAt(2) ^ (solutionChecksum & 0xFF),\n\t\tMAGIC_CHECKSUM_STRING.charCodeAt(3) ^ (textChecksum & 0xFF),\n\t\tMAGIC_CHECKSUM_STRING.charCodeAt(4) ^ ((headerChecksum & 0xFF00) >> 8),\n\t\tMAGIC_CHECKSUM_STRING.charCodeAt(5) ^ ((answerChecksum & 0xFF00) >> 8),\n\t\tMAGIC_CHECKSUM_STRING.charCodeAt(6) ^ ((solutionChecksum & 0xFF00) >> 8),\n\t\tMAGIC_CHECKSUM_STRING.charCodeAt(7) ^ ((textChecksum & 0xFF00) >> 8)\n\t\t/* eslint-enable no-magic-numbers */\n\t]);\n\n\n\treturn magicChecksum;\n}\n\nfunction _transposeGrid(gridString, width, height) {\n\tconst data = gridString.match(new RegExp(\".{1,\" + width + \"}\", \"g\"));\n\n\treturn range(width).map(\n\t\t(c) => range(height).map(\n\t\t\t(r) => data[r][c]\n\t\t).join(\"\")\n\t).join(\"\");\n}\n\nfunction _restoreSolution(s, t) {\n\t/*\n\ts is the source string, it can contain '.'\n\tt is the target, it's smaller than s by the number of '.'s in s\n\n\tEach char in s is replaced by the corresponding\n\tchar in t, jumping over '.'s in s.\n\n\t>>> restore('ABC.DEF', 'XYZABC')\n\t'XYZ.ABC'\n\t*/\n    \n\tt = t.split(\"\");\n\n\treturn s.split(\"\").reduce(\n\t\t(arr, c) => {\n\t\t\tif (c === BLOCK_CELL_VALUE) {\n\t\t\t\tarr.push(c);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tarr.push(t.shift());\n\t\t\t}\n\n\t\t\treturn arr;\n\t\t},\n\t\t[]\n\t).join(\"\");\n}\n\nfunction _shift(str, key) {\n\treturn str.split(\"\").map(\n\t\t(c, index) => {\n\t\t\tlet letterIndex = (ATOZ.indexOf(c) + Number(key[index % key.length])) % ATOZ.length;\n\n\t\t\tif (letterIndex < 0) {\n\t\t\t\tletterIndex = ATOZ.length + letterIndex;\n\t\t\t}\n\n\t\t\treturn ATOZ[letterIndex];\n\t\t}\n\t).join(\"\");\n}\n\nfunction _unshift(str, key) {\n\treturn _shift(\n\t\tstr,\n\t\tmap(key, (k) => -k)\n\t);\n}\n\nfunction _everyOther(str) {\n\treturn str.split(\"\").reduce(\n\t\t(arr, c, i) => {\n\t\t\t// eslint-disable-next-line no-magic-numbers\n\t\t\tif (i % 2 === 0) {\n\t\t\t\tarr.push(c);\n\t\t\t}\n\n\t\t\treturn arr;\n\t\t},\n\t\t[]\n\t).join(\"\");\n}\n\nfunction _unshuffle(str) {\n\treturn _everyOther(str.substring(1)) + _everyOther(str);\n}\n\nfunction _unscrambleString(str, key) {\n\tconst len = str.length;\n\n\treverse(padStart(key, PUZZLE_KEY_LENGTH, \"0\").split(\"\")).forEach(\n\t\t(k) => {\n\t\t\tstr = _unshuffle(str);\n\t\t\tstr = str.substring(len - k) + str.substring(0, len - k);\n\t\t\tstr = _unshift(str, key);\n\t\t}\n\t);\n\n\treturn str;\n}\n\n\nfunction _shuffle(str) {\n\t// eslint-disable-next-line no-magic-numbers\n\tconst mid = Math.floor(str.length / 2);\n\n\treturn zip(\n\t\tstr.substring(mid).split(\"\"),\n\t\tstr.substring(0, mid).split(\"\")\n\t).reduce(\n\t\t(arr, chars) => {\n\t\t\tif (chars[0] === undefined || chars[1] === undefined) {\n\t\t\t\treturn arr;\n\t\t\t}\n\n\t\t\tarr.push(chars[0] + chars[1]);\n\n\t\t\treturn arr;\n\t\t},\n\t\t[]\n\t// eslint-disable-next-line no-magic-numbers\n\t).join(\"\") + (str.length % 2 ? str[str.length - 1] : \"\");\n}\n\nfunction _scrambleString(str, key) {\n\t/*\n\tstr is the puzzle's solution in column-major order, omitting black squares:\n\ti.e. if the puzzle is:\n\t\tC A T\n\t\t# # A\n\t\t# # R\n\tsolution is CATAR\n\n\n\tKey is a 4-digit number in the range 1000 <= key <= 9999\n\n    */\n\n\teach(\n\t\tpadStart(key, PUZZLE_KEY_LENGTH, \"0\"),\n\t\t(k) => {\n\t\t\tstr = _shift(str, key);\n\t\t\tstr = str.substring(k) + str.substring(0, k);\n\t\t\tstr = _shuffle(str);\n\t\t}\n\t);\n\n\treturn str;\n}\n\nfunction _scrambledChecksum(answer, width, height) {\n\tconst transposed = _transposeGrid(\n\t\t_flattenSolution(answer),\n\t\twidth,\n\t\theight\n\t).replace(BLOCK_CELL_VALUE_REGEX, \"\");\n\n\treturn _doChecksum(iconv.encode(transposed, PUZReader.ENCODING));\n}\n\nfunction _validateChecksums(puzzleData) {\n\tconst headerChecksum = _headerChecksum(puzzleData);\n\n\tconst globalChecksum = _globalChecksum(puzzleData, headerChecksum);\n\n\tconst magicChecksum = _magicChecksum(puzzleData);\n\n\tconst checksums = {\n\t\theader: headerChecksum,\n\t\tglobal: globalChecksum,\n\t\tmagic: magicChecksum\n\t};\n\n\tconst errors = [];\n\n\tif (checksums.header !== puzzleData.header.headerChecksum) {\n\t\terrors.push(\"header checksums do not match\");\n\t}\n\n\tif (checksums.global !== puzzleData.header.globalChecksum) {\n\t\terrors.push(\"global checksums do not match\");\n\t}\n\n\tif (!checksums.magic.equals(puzzleData.header.magicChecksum)) {\n\t\terrors.push(\"magic checksums do not match\");\n\t}\n\n\teach(\n\t\tpuzzleData._extensions,\n\t\t(extension, name) => {\n\t\t\tif (extension.checksum !== _doChecksum(extension.data)) {\n\t\t\t\terrors.push(`checksum for extension ${name} does not match`);\n\t\t\t}\n\t\t}\n\t);\n\n\treturn errors;\n}\n\nfunction _scrambleSolution(solutionGrid, key) {\n\tconst height = solutionGrid.length;\n\tconst width = solutionGrid[0].length;\n\n\tlet solutionString = flatten(\n\t\t_flattenSolution(solutionGrid)\n\t).join(\"\");\n\n\tconst transposed = _transposeGrid(solutionString, width, height);\n\n\tconst data = _restoreSolution(\n\t\ttransposed,\n\t\t_scrambleString(transposed.replace(BLOCK_CELL_VALUE_REGEX, \"\"), key)\n\t);\n\n\tsolutionString = _transposeGrid(data, height, width);\n\n\treturn chunk(solutionString.split(\"\"), width);\n}\n\nfunction _unscrambleSolution(puzzleData, key) {\n\tconst transposed = _transposeGrid(\n\t\tpuzzleData.answer,\n\t\tpuzzleData.header.width,\n\t\tpuzzleData.header.height\n\t);\n\n\tconst data = _restoreSolution(\n\t\ttransposed,\n\t\t_unscrambleString(\n\t\t\ttransposed.replace(BLOCK_CELL_VALUE_REGEX, \"\"),\n\t\t\tkey\n\t\t)\n\t);\n\n\tconst result = _transposeGrid(\n\t\tdata,\n\t\tpuzzleData.header.height,\n\t\tpuzzleData.header.width\n\t);\n\n\tif (result === puzzleData.answer) {\n\t\tthrow new Error(\"Unscrambled solution is the same as the scrambled solution; incorrect key?\");\n\t}\n\n\treturn result;\n}\n\nfunction _writeHeader(puzzleData, options) {\n\tconst globalChecksumBuffer = new Buffer(CHECKSUM_BUFFER_LENGTH);\n\n\tglobalChecksumBuffer.writeUInt16LE(_globalChecksum(puzzleData));\n\n\tconst headerChecksumBuffer = new Buffer(CHECKSUM_BUFFER_LENGTH);\n\n\theaderChecksumBuffer.writeUInt16LE(_headerChecksum(puzzleData));\n\n\tconst magicChecksumBuffer = _magicChecksum(puzzleData);\n\n\tconst scrambledChecksumBuffer = new Buffer(CHECKSUM_BUFFER_LENGTH);\n\n\tif (get(options, \"scrambled\")) {\n\t\tscrambledChecksumBuffer.writeUInt16LE(\n\t\t\t_scrambledChecksum(\n\t\t\t\tpuzzleData.unscrambledAnswer,\n\t\t\t\tpuzzleData.header.width,\n\t\t\t\tpuzzleData.header.height\n\t\t\t)\n\t\t);\n\t}\n\telse {\n\t\tscrambledChecksumBuffer.fill(0x0);\n\t}\n\n\tconst numberOfCluesBuffer = new Buffer(NUMBER_OF_CLUES_BUFFER_LENGTH);\n\n\tnumberOfCluesBuffer.writeUInt16LE(puzzleData.header.numberOfClues);\n\n\tconst puzzleTypeBuffer = new Buffer(PUZZLE_TYPE_BUFFER_LENGTH);\n\n\tpuzzleTypeBuffer.writeUInt16LE(puzzleData.header.puzzleType);\n\n\tconst solutionStateBuffer = new Buffer(SOLUTION_STATE_BUFFER_LENGTH);\n\n\tsolutionStateBuffer.writeUInt16LE(puzzleData.header.solutionState);\n\n\treturn Buffer.concat(\n\t\t[\n\t\t\tglobalChecksumBuffer,\n\t\t\ticonv.encode(\"ACROSS&DOWN\\0\", PUZReader.ENCODING),\n\t\t\theaderChecksumBuffer,\n\t\t\tmagicChecksumBuffer,\n\t\t\ticonv.encode(get(options, \"version\", \"1.3\") + \"\\0\", PUZReader.ENCODING),\n\t\t\t// unknown block 1\n\t\t\tnew Buffer([0x0, 0x0]),\n\t\t\tscrambledChecksumBuffer,\n\t\t\t// unknown block 2\n\t\t\tnew Buffer(UNKNOWN2_BYTE_LENGTH).fill(0x0),\n\t\t\tnew Buffer([puzzleData.header.width]),\n\t\t\tnew Buffer([puzzleData.header.height]),\n\t\t\tnumberOfCluesBuffer,\n\t\t\tpuzzleTypeBuffer,\n\t\t\tsolutionStateBuffer\n\t\t],\n\t\tHEADER_BUFFER_LENGTH\n\t);\n}\n\nfunction _writeExtension(extensionBuffer, extensionName) {\n\tconst lengthBuffer = new Buffer(EXTENSION_LENGTH_BUFFER_LENGTH);\n\tlengthBuffer.writeUInt16LE(extensionBuffer.length);\n\n\tconst checksumBuffer = new Buffer(CHECKSUM_BUFFER_LENGTH);\n\tchecksumBuffer.writeUInt16LE(_doChecksum(extensionBuffer));\n\n\treturn Buffer.concat(\n\t\t[\n\t\t\ticonv.encode(extensionName, PUZReader.ENCODING),\n\t\t\tlengthBuffer,\n\t\t\tchecksumBuffer,\n\t\t\textensionBuffer,\n\t\t\tnew Buffer([0])\n\t\t],\n\t\tEXTENSION_NAME_LENGTH + EXTENSION_LENGTH_BUFFER_LENGTH + CHECKSUM_BUFFER_LENGTH + extensionBuffer.length + 1\n\t);\n}\n\nfunction _writeGRBS(answerArray, rebusSolutions) {\n\tconst grbsBuffer = new Buffer(\n\t\tanswerArray.map(\n\t\t\t(cell, index) => {\n\t\t\t\tconst solutionKey = findKey(\n\t\t\t\t\trebusSolutions,\n\t\t\t\t\t(solutionInfo) => solutionInfo.cells.includes(index)\n\t\t\t\t);\n\n\t\t\t\tif (solutionKey === undefined) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn parseInt(solutionKey, 10) + 1;\n\t\t\t}\n\t\t)\n\t);\n\n\treturn _writeExtension(grbsBuffer, \"GRBS\");\n}\n\nfunction _writeRTBL(rebusSolutions) {\n\tconst rtblBuffer = iconv.encode(\n\t\tObject.keys(rebusSolutions).map(\n\t\t\t(key) => `${padStart(key, RTBL_KEY_PADDING_WIDTH, \" \")}:${rebusSolutions[key].solution};`\n\t\t).join(\"\"),\n\t\tPUZReader.ENCODING\n\t);\n\n\treturn _writeExtension(rtblBuffer, \"RTBL\");\n}\n\nfunction _writeRUSR(userSolutionArray) {\n\tconst rusrBuffer = iconv.encode(\n\t\tuserSolutionArray.map(\n\t\t\t(solution) => {\n\t\t\t\tif (solution.length > 1) {\n\t\t\t\t\treturn `${solution}\\0`;\n\t\t\t\t}\n\n\t\t\t\treturn \"\\0\";\n\t\t\t}\n\t\t).join(\"\"),\n\t\tPUZReader.ENCODING\n\t);\n\n\treturn _writeExtension(rusrBuffer, \"RUSR\");\n}\n\nfunction _writeLTIM(timing) {\n\treturn _writeExtension(\n\t\ticonv.encode(\n\t\t\t`${timing.elapsed},${timing.running ? \"1\" : \"0\"}`,\n\t\t\tPUZReader.ENCODING\n\t\t),\n\t\t\"LTIM\"\n\t);\n}\n\nfunction _writeRebus(answerArray, userSolutionArray, extensions) {\n\tlet solutionKey = 0;\n\n\tconst rebusSolutions = flatten(answerArray).reduce(\n\t\t(solutions, cellSolution, cellIndex) => {\n\t\t\tif (cellSolution && cellSolution.length > 1) {\n\t\t\t\tconst key = findKey(solutions, {solution: cellSolution});\n\n\t\t\t\tif (key === undefined) {\n\t\t\t\t\tsolutions[++solutionKey] = {\n\t\t\t\t\t\tsolution: cellSolution,\n\t\t\t\t\t\tcells: [cellIndex]\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tsolutions[key].cells.push(cellIndex);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn solutions;\n\t\t},\n\t\t{}\n\t);\n\n\tconst grbsBuffer = _writeGRBS(answerArray, rebusSolutions);\n\n\tconst rtblBuffer = _writeRTBL(rebusSolutions);\n\n\tconst rusrBuffer = _writeRUSR(userSolutionArray);\n\n\tconst buffers = [\n\t\tgrbsBuffer,\n\t\trtblBuffer,\n\t\trusrBuffer,\n\t];\n\n\tlet totalBufferLength = grbsBuffer.length + rtblBuffer.length + rusrBuffer.length;\n\n\tif (extensions.timing) {\n\t\tconst ltimBuffer = _writeLTIM(extensions.timing);\n\t\tbuffers.push(ltimBuffer);\n\n\t\ttotalBufferLength += ltimBuffer.length;\n\t}\n\n\treturn Buffer.concat(\n\t\tbuffers,\n\t\ttotalBufferLength\n\t);\n}\n\nfunction _parsePuzzle(path, options) {\n\tconst data = {};\n\n\tconst reader = new PUZReader(path);\n\n\tdata.header = _readHeader(reader, options);\n\n\tconst numberOfCells = data.header.width * data.header.height;\n\n\tdata.answer = reader._readString(numberOfCells);\n\n\tif (data.header.solutionState === SOLUTION_STATE.Locked) {\t\t\t\t\t\t\n\t\tdata.unscrambledAnswer = _unscrambleSolution(\n\t\t\t{\n\t\t\t\theader: data.header,\n\t\t\t\tanswer: data.answer\n\t\t\t},\n\t\t\toptions.solutionKey\n\t\t);\n\t}\n\telse {\n\t\tdata.unscrambledAnswer = data.answer;\n\t}\n\n\tdata.solution = reader._readString(numberOfCells);\n\n\tdata.title = reader._readString();\n\n\tdata.author = reader._readString();\n\n\tdata.copyright = reader._readString();\n\n\tdata.clueList = _readClues(reader, data.header.numberOfClues);\n\n\tconst gridAndClues = _generateGridAndClues(\n\t\t_unflattenSolution(data.unscrambledAnswer, data.header.width),\n\t\tdata.clueList\n\t);\n\n\tdata.grid = gridAndClues.grid;\n\tdata.clues = gridAndClues.clues;\n\n\tdata.notes = reader._readString();\n\n\t _parseExtensions(reader, data);\n\n\t return data;\n}\n\nfunction validatePuzzle(puzzle) {\n\tconst checksumResults = _validateChecksums(puzzle);\n\n\tconst errors = [];\n\n\tif (checksumResults) {\n\t\terrors.push(...checksumResults);\n\t}\n\n\treturn errors.length === 0 ? undefined : errors;\n}\n\nfunction _getPuzzleData(path, options) {\n\treturn new Promise(\n\t\t(resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tconst puzzleData = _parsePuzzle(path, options);\n\n\t\t\t\tconst errors = validatePuzzle(puzzleData);\n\n\t\t\t\tif (errors !== undefined) {\n\t\t\t\t\treject(`Invalid puzzle:\\n\\t${errors.join(\"\\n\\t\")}`);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tresolve({\n\t\t\t\t\t\tinfo: {\n\t\t\t\t\t\t\ttitle: puzzleData.title || undefined,\n\t\t\t\t\t\t\tauthor: puzzleData.author || undefined,\n\t\t\t\t\t\t\tcopyright: puzzleData.copyright || undefined,\n\t\t\t\t\t\t\tintro: puzzleData.notes || undefined,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tgrid: puzzleData.grid,\n\t\t\t\t\t\tclues: puzzleData.clues,\n\t\t\t\t\t\tuserSolution: _unflattenSolution(puzzleData.solution, puzzleData.header.width),\n\t\t\t\t\t\textensions: {\n\t\t\t\t\t\t\ttiming: puzzleData.timing\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch(err) {\n\t\t\t\treject(err);\n\t\t\t}\n\t\t}\n\t);\n}\n\n/**\n * Parser class for PUZ-formatted puzzles.\n *\n * @constructor\n */\nclass PUZParser {\n\t/**\n\t * Parses a file in .puz format into a {@link module:xpuz/puzzle~Puzzle|Puzzle} object.\n\t *\n\t * @memberOf module:xpuz/parsers/puz~PUZParser\n\t * @function\n\t * @instance\n\t *\n\t * @param {string|external:Buffer|ArrayBuffer} path - the .puz file to parse, either as a file path\n\t *\t(strong) or a {@link external:Buffer|Buffer} or {@link external:ArrayBuffer|ArrayBuffer} containing the puzzle\n\t *\tcontent.\n\t * @param {object} [options] - an object of options to affect the parsing\n\t * @param {Number} [options.solutionKey] - an integer between 1000 and 9999, inclusive, to use to unlock\n\t *\tthe puzzle's solution if the solution is locked. If the solution is not locked, this is ignored.\n\t *\n\t * @throws if the puzzle is locked and an invalid (or no) `options.solutionKey` was provided\n\t *\n\t * @returns {external:Bluebird} a promise that resolves with the {@link module:xpuz/puzzle~Puzzle|Puzzle} object \n\t */\n\tparse(path, options) {\n\t\toptions = options || {};\n\n\t\treturn _getPuzzleData(path, options).then(\n\t\t\t(puzzleData) => new Puzzle(puzzleData)\n\t\t);\n\t}\n\n\tparseImmutable(path, options) {\n\t\toptions = options || {};\n\n\t\treturn _getPuzzleData(path, options).then(\n\t\t\t(puzzleData) => new ImmutablePuzzle(puzzleData)\n\t\t);\n\t}\n\n\t/**\n\t * Given a {@link module:xpuz/puzzle~Puzzle|Puzzle} object, returns a {@link external:Buffer|Buffer}\n\t * containing the puzzle in .puz format.\n\t *\n\t * @memberOf module:xpuz/parsers/puz~PUZParser\n\t * @function\n\t * @instance\n\t *\n\t * @param {module:xpuz/puzzle~Puzzle|XPuz.ImmutablePuzzle} puzzle - the puzzle to convert to .puz content.\n\t * @param {object} [options] - an object containing additional options for the conversion\n\t * @param {boolean} [options.scrambled] - if true, the puzzle's solution will be scrambled\n\t * @param {Number} [options.solutionKey] - the solution key with which to scramble the solution. \n\t *\tIf `options.scrambled` is true, this is required.\n\t *\n\t * @throws if `options.scrambled` is true but `options.solutionKey` is not a 4-digit integer\n\t *\t(between 1000 and 9999, inclusive).\n\t *\n\t * @returns {external:Buffer} a Buffer containing the .puz content. \n\t */\n\tgenerate(puzzle, options) {\n\t\tpuzzle = puzzle.toJSON();\n\n\t\tconst numberOfClues = size(puzzle.clues.across) + size(puzzle.clues.down);\n\t\tconst puzzleType = PUZZLE_TYPE.Normal;\n\t\tlet solutionState = SOLUTION_STATE.Unlocked;\n\n\t\toptions = options || {};\n\n\t\tconst height = puzzle.grid.length;\n\t\tconst width = puzzle.grid[0].length;\n\n\t\tconst notes = puzzle.info.intro || \"\";\n\n\t\tlet answerArray = _pluckSolutions(puzzle.grid);\n\t\tlet unscrambledAnswerArray;\n\n\t\tif (options.scrambled) {\n\t\t\tif (\n\t\t\t\t!options.solutionKey ||\n\t\t\t\tNumber(options.solutionKey) < MINIMUM_KEY_VALUE ||\n\t\t\t\tNumber(options.solutionKey) > MAXIMUM_KEY_VALUE\n\t\t\t) {\n\t\t\t\tthrow new Error(`Must specify a solution key that is an integer >= 1000 and <= 9999; was ${options.solutionKey}`);\n\t\t\t}\n\n\t\t\tunscrambledAnswerArray = answerArray;\n\t\t\tanswerArray = _scrambleSolution(answerArray, options.solutionKey);\n\n\t\t\tsolutionState = SOLUTION_STATE.Locked;\n\t\t}\n\n\t\tconst flattenedAnswerArray = flatten(answerArray);\n\t\tconst flattenedUnscrambledAnswerArray = flatten(unscrambledAnswerArray || answerArray);\n\n\t\tconst userSolution = puzzle.userSolution.map(\n\t\t\t(row) => row.map(\n\t\t\t\t(solution) => {\n\t\t\t\t\tif (solution === null) {\n\t\t\t\t\t\treturn BLOCK_CELL_VALUE;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (solution === \"\") {\n\t\t\t\t\t\treturn \"-\";\n\t\t\t\t\t}\n\n\t\t\t\t\treturn solution;\n\t\t\t\t}\n\t\t\t)\n\t\t);\n\n\t\tconst userSolutionArray = flatten(userSolution);\n\n\t\tconst clueList = compact(flatten(puzzle.grid).map((cell) => cell.clueNumber)).reduce(\n\t\t\t(cluesArray, clueNumber) => {\n\t\t\t\tif (puzzle.clues.across[clueNumber] !== undefined) {\n\t\t\t\t\tcluesArray.push(puzzle.clues.across[clueNumber]);\n\t\t\t\t}\n\n\t\t\t\tif (puzzle.clues.down[clueNumber] !== undefined) {\n\t\t\t\t\tcluesArray.push(puzzle.clues.down[clueNumber]);\n\t\t\t\t}\n\n\t\t\t\treturn cluesArray;\n\t\t\t},\n\t\t\t[]\n\t\t);\n\n\t\tconst puzzleData = {\n\t\t\theader: {\n\t\t\t\twidth,\n\t\t\t\theight,\n\t\t\t\tnumberOfClues,\n\t\t\t\tpuzzleType,\n\t\t\t\tsolutionState\n\t\t\t},\n\t\t\tanswer: _flattenSolution(flattenedAnswerArray),\n\t\t\tunscrambledAnswer: _flattenSolution(flattenedUnscrambledAnswerArray),\n\t\t\tsolution: _flattenSolution(userSolution),\n\t\t\ttitle: puzzle.info.title,\n\t\t\tauthor: puzzle.info.author,\n\t\t\tcopyright: puzzle.info.copyright,\n\t\t\tclueList,\n\t\t\tnotes\n\t\t};\n\n\t\tconst headerBuffer = _writeHeader(puzzleData, options);\n\n\t\tconst answerStringBuffer = iconv.encode(\n\t\t\t_flattenSolution(answerArray),\n\t\t\tPUZReader.ENCODING\n\t\t);\n\n\t\tconst userSolutionStringBuffer = iconv.encode(\n\t\t\tuserSolutionArray.map(\n\t\t\t\t(solution) => solution[0]\n\t\t\t).join(\"\"),\n\t\t\tPUZReader.ENCODING\n\t\t);\n\n\t\tconst titleStringBuffer = iconv.encode(`${puzzle.info.title || \"\"}\\0`, PUZReader.ENCODING);\n\t\tconst authorStringBuffer = iconv.encode(`${puzzle.info.author || \"\"}\\0`, PUZReader.ENCODING);\n\t\tconst copyrightStringBuffer = iconv.encode(`${puzzle.info.copyright || \"\"}\\0`, PUZReader.ENCODING);\n\n\t\tconst cluesStringBuffer = iconv.encode(`${clueList.join(\"\\0\")}\\0`, PUZReader.ENCODING);\n\n\t\tconst notesStringBuffer = iconv.encode(`${notes}\\0`, PUZReader.ENCODING);\n\n\t\tconst buffers = [\n\t\t\theaderBuffer,\n\t\t\tanswerStringBuffer,\n\t\t\tuserSolutionStringBuffer,\n\t\t\ttitleStringBuffer,\n\t\t\tauthorStringBuffer,\n\t\t\tcopyrightStringBuffer,\n\t\t\tcluesStringBuffer,\n\t\t\tnotesStringBuffer,\n\t\t];\n\n\t\tlet totalBufferLength = headerBuffer.length + answerStringBuffer.length +\n\t\t\tuserSolutionStringBuffer.length + titleStringBuffer.length +\n\t\t\tauthorStringBuffer.length + copyrightStringBuffer.length +\n\t\t\tcluesStringBuffer.length + notesStringBuffer.length;\n\n\t\tif (\n\t\t\tflattenedUnscrambledAnswerArray.some((solution) => solution.length > 1)\n\t\t) {\n\t\t\tconst rebusBuffer = _writeRebus(\n\t\t\t\tflattenedUnscrambledAnswerArray,\n\t\t\t\tuserSolutionArray,\n\t\t\t\tpuzzle.extensions || {}\n\t\t\t);\n\n\t\t\tbuffers.push(rebusBuffer);\n\n\t\t\ttotalBufferLength += rebusBuffer.length;\n\t\t}\n\n\t\treturn Buffer.concat(buffers, totalBufferLength);\n\t}\n}\n\nexports = module.exports = PUZParser;\n",
    "const isString     = require(\"lodash/isString\");\nconst fs           = require(\"fs\");\nconst BufferReader = require(\"buffer-reader\");\nconst iconv        = require(\"iconv-lite\");\n\nconst ENCODING = \"ISO-8859-1\";\n\nconst INT16_BYTE_COUNT = 2;\n\nconst INT32_BYTE_COUNT = 4;\n\nconst DEFAULT_STRING_BUFFER_LENGTH = 20;\n\nclass PUZReader {\n\tstatic ENCODING = ENCODING\n\n\tconstructor(puz) {\n\t\tlet _buffer;\n\n\t\tif (isString(puz)) {\n\t\t\t// filename\n\t\t\t_buffer = fs.readFileSync(puz);\n\t\t}\n\t\telse if (puz instanceof Buffer) {\n\t\t\t// Already a buffer\n\t\t\t_buffer = puz;\n\t\t}\n\t\telse if (puz instanceof ArrayBuffer) {\n\t\t\t// ArrayBuffer--probably from client-side JS\n\t\t\t_buffer = new Buffer(new Uint8Array(puz));\n\t\t}\n\n\t\tthis._bufferReader = new BufferReader(_buffer);\n\n\t\tthis._bufferSize = _buffer.length;\n\t}\n\n\t_readValues = (length) => this._bufferReader.nextBuffer(length)\n\n\t_seek = (position, relativeTo) => {\n\t\trelativeTo = relativeTo || { start: true };\n\n\t\tif (relativeTo.start) {\n\t\t\tthis._bufferReader.seek(position);\n\t\t}\n\t\telse if (relativeTo.current) {\n\t\t\tthis._bufferReader.move(position);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t_readUInt8 = () => this._readValues(1).readUInt8(0)\n\n\t_readUInt16 = () => this._readValues(INT16_BYTE_COUNT).readUInt16LE(0)\n\n\t_readUInt32 = () => this._readValues(INT32_BYTE_COUNT).readUInt32LE(0)\n\n\t_readString = (length) => {\n\t\tlet bufferLength = length || DEFAULT_STRING_BUFFER_LENGTH;\n\n\t\tconst size = this.size();\n\t\tconst currentPosition = this.tell();\n\n\t\tif (currentPosition + bufferLength > size) {\n\t\t\tbufferLength = size - currentPosition;\n\t\t}\n\n\t\tif (bufferLength === 0) {\n\t\t\treturn \"\";\n\t\t}\n\n\t\tconst buffer = this._readValues(bufferLength);\n\t\tlet str = iconv.decode(buffer, ENCODING);\n\n\t\tif (length) {\n\t\t\treturn str;\n\t\t}\n\n\t\tconst nullIndex = str.indexOf(\"\\0\");\n\n\t\tif (nullIndex >= 0) {\n\t\t\tconst nullOffset = nullIndex - str.length;\n\n\t\t\tif (nullOffset < 0) {\n\t\t\t\tthis._seek(nullOffset + 1, { current: true });\n\n\t\t\t\tstr = str.substring(0, nullIndex);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tstr = str + this._readString();\n\t\t}\n\n\t\treturn str;\n\t}\n\n\tsize = () => this._bufferSize\n\n\ttell = () => this._bufferReader.tell()\n}\n\nmodule.exports = exports = PUZReader;\n"
  ]
}